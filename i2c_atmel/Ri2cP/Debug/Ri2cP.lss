
Ri2cP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000003a2  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e8  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000887  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000043b  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000429  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001c0  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002c3  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000670  00000000  00000000  00001a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000118  00000000  00000000  0000209b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 30       	cpi	r26, 0x02	; 2
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	3e d1       	rcall	.+636    	; 0x2ce <main>
  52:	6b c1       	rjmp	.+726    	; 0x32a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_i2c_start>:
	i2c_err_code = errcode;
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
}

void _i2c_start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) ;
  56:	84 ea       	ldi	r24, 0xA4	; 164
  58:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1 << TWINT)) == 0);
  5c:	ec eb       	ldi	r30, 0xBC	; 188
  5e:	f0 e0       	ldi	r31, 0x00	; 0
  60:	80 81       	ld	r24, Z
  62:	88 23       	and	r24, r24
  64:	ec f7       	brge	.-6      	; 0x60 <_i2c_start+0xa>
	if (((TWSR & 0xF8) != I2C_START) && ((TWSR & 0xF8) != I2C_R_START)) 
  66:	80 91 b9 00 	lds	r24, 0x00B9
  6a:	88 7f       	andi	r24, 0xF8	; 248
  6c:	88 30       	cpi	r24, 0x08	; 8
  6e:	81 f0       	breq	.+32     	; 0x90 <_i2c_start+0x3a>
  70:	80 91 b9 00 	lds	r24, 0x00B9
  74:	88 7f       	andi	r24, 0xF8	; 248
  76:	80 31       	cpi	r24, 0x10	; 16
  78:	59 f0       	breq	.+22     	; 0x90 <_i2c_start+0x3a>
		_i2c_stop((TWSR & 0xF8), I2C_ERR_START);
  7a:	80 91 b9 00 	lds	r24, 0x00B9

u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
  7e:	91 e0       	ldi	r25, 0x01	; 1
  80:	90 93 01 01 	sts	0x0101, r25

void _i2c_start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) ;
	while ((TWCR & (1 << TWINT)) == 0);
	if (((TWSR & 0xF8) != I2C_START) && ((TWSR & 0xF8) != I2C_R_START)) 
		_i2c_stop((TWSR & 0xF8), I2C_ERR_START);
  84:	88 7f       	andi	r24, 0xF8	; 248
u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
	i2c_err_code = errcode;
  86:	80 93 00 01 	sts	0x0100, r24
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  8a:	84 e9       	ldi	r24, 0x94	; 148
  8c:	80 93 bc 00 	sts	0x00BC, r24
  90:	08 95       	ret

00000092 <_i2c_write_da>:
	if (((TWSR & 0xF8) != I2C_START) && ((TWSR & 0xF8) != I2C_R_START)) 
		_i2c_stop((TWSR & 0xF8), I2C_ERR_START);
}

void _i2c_write_da(u8 dev_addr) {
	TWDR = dev_addr;
  92:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
  96:	84 e8       	ldi	r24, 0x84	; 132
  98:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
  9c:	ec eb       	ldi	r30, 0xBC	; 188
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 23       	and	r24, r24
  a4:	ec f7       	brge	.-6      	; 0xa0 <_i2c_write_da+0xe>
	if ( ((TWSR & 0xF8) != I2C_SLA_ACK) && ((TWSR & 0xF8) != I2C_MR_DATA_ACK) && ((TWSR & 0xF8) != I2C_MR_BR_ACK) )
  a6:	80 91 b9 00 	lds	r24, 0x00B9
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	88 31       	cpi	r24, 0x18	; 24
  ae:	a9 f0       	breq	.+42     	; 0xda <_i2c_write_da+0x48>
  b0:	80 91 b9 00 	lds	r24, 0x00B9
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	80 34       	cpi	r24, 0x40	; 64
  b8:	81 f0       	breq	.+32     	; 0xda <_i2c_write_da+0x48>
  ba:	80 91 b9 00 	lds	r24, 0x00B9
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	80 35       	cpi	r24, 0x50	; 80
  c2:	59 f0       	breq	.+22     	; 0xda <_i2c_write_da+0x48>
		_i2c_stop((TWSR & 0xF8), I2C_ERR_WADDR);
  c4:	80 91 b9 00 	lds	r24, 0x00B9

u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	90 93 01 01 	sts	0x0101, r25
void _i2c_write_da(u8 dev_addr) {
	TWDR = dev_addr;
	TWCR = (1 << TWINT) | (1 << TWEN);
	while (!(TWCR & (1 << TWINT)));
	if ( ((TWSR & 0xF8) != I2C_SLA_ACK) && ((TWSR & 0xF8) != I2C_MR_DATA_ACK) && ((TWSR & 0xF8) != I2C_MR_BR_ACK) )
		_i2c_stop((TWSR & 0xF8), I2C_ERR_WADDR);
  ce:	88 7f       	andi	r24, 0xF8	; 248
u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
	i2c_err_code = errcode;
  d0:	80 93 00 01 	sts	0x0100, r24
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  d4:	84 e9       	ldi	r24, 0x94	; 148
  d6:	80 93 bc 00 	sts	0x00BC, r24
  da:	08 95       	ret

000000dc <_i2c_write>:
	if ( ((TWSR & 0xF8) != I2C_SLA_ACK) && ((TWSR & 0xF8) != I2C_MR_DATA_ACK) && ((TWSR & 0xF8) != I2C_MR_BR_ACK) )
		_i2c_stop((TWSR & 0xF8), I2C_ERR_WADDR);
}

void _i2c_write(u8 data, u8 ack) {
	TWDR = data;
  dc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1 << TWINT) | (1 << TWEN) | ((ack != I2C_ACK) ? 0 : (1 << TWEA));
  e0:	61 30       	cpi	r22, 0x01	; 1
  e2:	11 f0       	breq	.+4      	; 0xe8 <_i2c_write+0xc>
  e4:	84 e8       	ldi	r24, 0x84	; 132
  e6:	01 c0       	rjmp	.+2      	; 0xea <_i2c_write+0xe>
  e8:	84 ec       	ldi	r24, 0xC4	; 196
  ea:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <_i2c_write+0x16>
	if ((TWSR & 0xF8) != I2C_DATA_ACK)
  f8:	80 91 b9 00 	lds	r24, 0x00B9
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	88 32       	cpi	r24, 0x28	; 40
 100:	59 f0       	breq	.+22     	; 0x118 <_i2c_write+0x3c>
		_i2c_stop((TWSR & 0xF8), I2C_ERR_WRITE);
 102:	80 91 b9 00 	lds	r24, 0x00B9

u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
 106:	92 e0       	ldi	r25, 0x02	; 2
 108:	90 93 01 01 	sts	0x0101, r25
void _i2c_write(u8 data, u8 ack) {
	TWDR = data;
	TWCR = (1 << TWINT) | (1 << TWEN) | ((ack != I2C_ACK) ? 0 : (1 << TWEA));
	while (!(TWCR & (1 << TWINT)));
	if ((TWSR & 0xF8) != I2C_DATA_ACK)
		_i2c_stop((TWSR & 0xF8), I2C_ERR_WRITE);
 10c:	88 7f       	andi	r24, 0xF8	; 248
u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
	i2c_err_code = errcode;
 10e:	80 93 00 01 	sts	0x0100, r24
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 112:	84 e9       	ldi	r24, 0x94	; 148
 114:	80 93 bc 00 	sts	0x00BC, r24
 118:	08 95       	ret

0000011a <_i2c_read>:
	if ((TWSR & 0xF8) != I2C_DATA_ACK)
		_i2c_stop((TWSR & 0xF8), I2C_ERR_WRITE);
}

u8 _i2c_read(u8 ack) {
	TWCR = (1 << TWINT) | (1 << TWEN) | ((ack != I2C_ACK) ? 0 : (1 << TWEA));
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	11 f0       	breq	.+4      	; 0x122 <_i2c_read+0x8>
 11e:	84 e8       	ldi	r24, 0x84	; 132
 120:	01 c0       	rjmp	.+2      	; 0x124 <_i2c_read+0xa>
 122:	84 ec       	ldi	r24, 0xC4	; 196
 124:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	ec f7       	brge	.-6      	; 0x12c <_i2c_read+0x12>
	if ((TWSR & 0xF8) == I2C_MR_BR_ACK) {
 132:	80 91 b9 00 	lds	r24, 0x00B9
 136:	88 7f       	andi	r24, 0xF8	; 248
 138:	80 35       	cpi	r24, 0x50	; 80
 13a:	19 f4       	brne	.+6      	; 0x142 <_i2c_read+0x28>
		return TWDR;
 13c:	80 91 bb 00 	lds	r24, 0x00BB
 140:	08 95       	ret
	} else if ((TWSR & 0xF8) == I2C_MR_BR_NACK) 
 142:	80 91 b9 00 	lds	r24, 0x00B9
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	88 35       	cpi	r24, 0x58	; 88
 14a:	19 f4       	brne	.+6      	; 0x152 <_i2c_read+0x38>
		return TWDR;
 14c:	80 91 bb 00 	lds	r24, 0x00BB
 150:	08 95       	ret
	else 
		_i2c_stop((TWSR & 0xF8), I2C_ERR_READ);
 152:	80 91 b9 00 	lds	r24, 0x00B9

u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	90 93 01 01 	sts	0x0101, r25
	if ((TWSR & 0xF8) == I2C_MR_BR_ACK) {
		return TWDR;
	} else if ((TWSR & 0xF8) == I2C_MR_BR_NACK) 
		return TWDR;
	else 
		_i2c_stop((TWSR & 0xF8), I2C_ERR_READ);
 15c:	88 7f       	andi	r24, 0xF8	; 248
u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
	i2c_err_code = errcode;
 15e:	80 93 00 01 	sts	0x0100, r24
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 162:	84 e9       	ldi	r24, 0x94	; 148
 164:	80 93 bc 00 	sts	0x00BC, r24
	} else if ((TWSR & 0xF8) == I2C_MR_BR_NACK) 
		return TWDR;
	else 
		_i2c_stop((TWSR & 0xF8), I2C_ERR_READ);
		
	return 0;
 168:	80 e0       	ldi	r24, 0x00	; 0
}
 16a:	08 95       	ret

0000016c <i2c_init>:

void i2c_init(void) {
	TWBR = (I2C_CPU_SPEED / 100000UL - 16) / 2;
 16c:	8c e1       	ldi	r24, 0x1C	; 28
 16e:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0;
 172:	10 92 b9 00 	sts	0x00B9, r1
 176:	08 95       	ret

00000178 <ds1307_writeb>:
}

void ds1307_writeb(u8 addr, u8 data) {
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	c8 2f       	mov	r28, r24
 17e:	d6 2f       	mov	r29, r22
	i2c_err = 0;
 180:	10 92 01 01 	sts	0x0101, r1
	i2c_err_code = 0;
 184:	10 92 00 01 	sts	0x0100, r1
	if (addr > DS1307_RAM_END) return;
 188:	80 34       	cpi	r24, 0x40	; 64
 18a:	00 f5       	brcc	.+64     	; 0x1cc <ds1307_writeb+0x54>
	
	_i2c_start();
 18c:	64 df       	rcall	.-312    	; 0x56 <_i2c_start>
	if (i2c_err != I2C_ERR_NO) return;
 18e:	80 91 01 01 	lds	r24, 0x0101
 192:	81 11       	cpse	r24, r1
 194:	1b c0       	rjmp	.+54     	; 0x1cc <ds1307_writeb+0x54>
	
	_i2c_write_da(DS1307_ADDR);
 196:	80 ed       	ldi	r24, 0xD0	; 208
 198:	7c df       	rcall	.-264    	; 0x92 <_i2c_write_da>
	if (i2c_err != I2C_ERR_NO) return;
 19a:	80 91 01 01 	lds	r24, 0x0101
 19e:	81 11       	cpse	r24, r1
 1a0:	15 c0       	rjmp	.+42     	; 0x1cc <ds1307_writeb+0x54>
	
	_i2c_write(addr, I2C_NACK);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	8c 2f       	mov	r24, r28
 1a6:	9a df       	rcall	.-204    	; 0xdc <_i2c_write>
	if (i2c_err != I2C_ERR_NO) return;
 1a8:	80 91 01 01 	lds	r24, 0x0101
 1ac:	81 11       	cpse	r24, r1
 1ae:	0e c0       	rjmp	.+28     	; 0x1cc <ds1307_writeb+0x54>
	
	_i2c_write(data, I2C_NACK);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	8d 2f       	mov	r24, r29
 1b4:	93 df       	rcall	.-218    	; 0xdc <_i2c_write>
	if (i2c_err != I2C_ERR_NO) return;
 1b6:	80 91 01 01 	lds	r24, 0x0101
 1ba:	81 11       	cpse	r24, r1
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <ds1307_writeb+0x54>

u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
 1be:	10 92 01 01 	sts	0x0101, r1
	i2c_err_code = errcode;
 1c2:	10 92 00 01 	sts	0x0100, r1
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 1c6:	84 e9       	ldi	r24, 0x94	; 148
 1c8:	80 93 bc 00 	sts	0x00BC, r24
	
	_i2c_write(data, I2C_NACK);
	if (i2c_err != I2C_ERR_NO) return;
	
	_i2c_stop(I2C_ERR_NO, I2C_ERR_NO);
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <ds1307_readb>:

u8 ds1307_readb(u8 addr) {
 1d2:	cf 93       	push	r28
 1d4:	c8 2f       	mov	r28, r24
	i2c_err = 0;
 1d6:	10 92 01 01 	sts	0x0101, r1
	i2c_err_code = 0;
 1da:	10 92 00 01 	sts	0x0100, r1
	if (addr > DS1307_RAM_END) return 0;
 1de:	80 34       	cpi	r24, 0x40	; 64
 1e0:	50 f5       	brcc	.+84     	; 0x236 <ds1307_readb+0x64>
	
	_i2c_start();
 1e2:	39 df       	rcall	.-398    	; 0x56 <_i2c_start>
	if (i2c_err != I2C_ERR_NO) return 0;
 1e4:	80 91 01 01 	lds	r24, 0x0101
 1e8:	81 11       	cpse	r24, r1
 1ea:	27 c0       	rjmp	.+78     	; 0x23a <ds1307_readb+0x68>
	
	_i2c_write_da(DS1307_ADDR);
 1ec:	80 ed       	ldi	r24, 0xD0	; 208
 1ee:	51 df       	rcall	.-350    	; 0x92 <_i2c_write_da>
	if (i2c_err != I2C_ERR_NO) return 0;
 1f0:	80 91 01 01 	lds	r24, 0x0101
 1f4:	81 11       	cpse	r24, r1
 1f6:	23 c0       	rjmp	.+70     	; 0x23e <ds1307_readb+0x6c>
	
	_i2c_write(addr, I2C_NACK);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	8c 2f       	mov	r24, r28
 1fc:	6f df       	rcall	.-290    	; 0xdc <_i2c_write>
	if (i2c_err != I2C_ERR_NO) return 0;
 1fe:	80 91 01 01 	lds	r24, 0x0101
 202:	81 11       	cpse	r24, r1
 204:	1e c0       	rjmp	.+60     	; 0x242 <ds1307_readb+0x70>
	
	_i2c_start();
 206:	27 df       	rcall	.-434    	; 0x56 <_i2c_start>
	if (i2c_err != I2C_ERR_NO) return 0;
 208:	80 91 01 01 	lds	r24, 0x0101
 20c:	81 11       	cpse	r24, r1
 20e:	1b c0       	rjmp	.+54     	; 0x246 <ds1307_readb+0x74>
	
	_i2c_write_da(DS1307_ADDR | I2C_READ);
 210:	81 ed       	ldi	r24, 0xD1	; 209
 212:	3f df       	rcall	.-386    	; 0x92 <_i2c_write_da>
	if (i2c_err != I2C_ERR_NO) return 0;
 214:	80 91 01 01 	lds	r24, 0x0101
 218:	81 11       	cpse	r24, r1
 21a:	17 c0       	rjmp	.+46     	; 0x24a <ds1307_readb+0x78>
	
	u8 retval = _i2c_read(I2C_NACK);
 21c:	7e df       	rcall	.-260    	; 0x11a <_i2c_read>
	if (i2c_err != I2C_ERR_NO) return 0;
 21e:	90 91 01 01 	lds	r25, 0x0101
 222:	91 11       	cpse	r25, r1
 224:	14 c0       	rjmp	.+40     	; 0x24e <ds1307_readb+0x7c>

u8 i2c_err		= I2C_ERR_NO;
u8 i2c_err_code	= 0;

void _i2c_stop(u8 errcode, u8 errno) {
	i2c_err = errno;
 226:	10 92 01 01 	sts	0x0101, r1
	i2c_err_code = errcode;
 22a:	10 92 00 01 	sts	0x0100, r1
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 22e:	94 e9       	ldi	r25, 0x94	; 148
 230:	90 93 bc 00 	sts	0x00BC, r25
 234:	0d c0       	rjmp	.+26     	; 0x250 <ds1307_readb+0x7e>
}

u8 ds1307_readb(u8 addr) {
	i2c_err = 0;
	i2c_err_code = 0;
	if (addr > DS1307_RAM_END) return 0;
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0b c0       	rjmp	.+22     	; 0x250 <ds1307_readb+0x7e>
	
	_i2c_start();
	if (i2c_err != I2C_ERR_NO) return 0;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	09 c0       	rjmp	.+18     	; 0x250 <ds1307_readb+0x7e>
	
	_i2c_write_da(DS1307_ADDR);
	if (i2c_err != I2C_ERR_NO) return 0;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	07 c0       	rjmp	.+14     	; 0x250 <ds1307_readb+0x7e>
	
	_i2c_write(addr, I2C_NACK);
	if (i2c_err != I2C_ERR_NO) return 0;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	05 c0       	rjmp	.+10     	; 0x250 <ds1307_readb+0x7e>
	
	_i2c_start();
	if (i2c_err != I2C_ERR_NO) return 0;
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	03 c0       	rjmp	.+6      	; 0x250 <ds1307_readb+0x7e>
	
	_i2c_write_da(DS1307_ADDR | I2C_READ);
	if (i2c_err != I2C_ERR_NO) return 0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	01 c0       	rjmp	.+2      	; 0x250 <ds1307_readb+0x7e>
	
	u8 retval = _i2c_read(I2C_NACK);
	if (i2c_err != I2C_ERR_NO) return 0;
 24e:	80 e0       	ldi	r24, 0x00	; 0
	
	_i2c_stop(I2C_ERR_NO, I2C_ERR_NO);
	
	return retval;
}
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <ds1307_init>:

void ds1307_init(u8 conf) {
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
	u8 ch = ds1307_readb(0x00);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	bb df       	rcall	.-138    	; 0x1d2 <ds1307_readb>
	ds1307_writeb(0x00, ch & (~DS1307_CH));
 25c:	68 2f       	mov	r22, r24
 25e:	6f 77       	andi	r22, 0x7F	; 127
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	8a df       	rcall	.-236    	; 0x178 <ds1307_writeb>
	ds1307_writeb(0x07, conf);
 264:	6c 2f       	mov	r22, r28
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	87 df       	rcall	.-242    	; 0x178 <ds1307_writeb>
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <__x_usart_init>:

unsigned char usart_rx_buf[USART_BUF_SIZE];
unsigned char usart_rx_counter = 0;

void __x_usart_init(void) {
	DDRD	&= ~(1 << PIND0); // RX
 26e:	50 98       	cbi	0x0a, 0	; 10
	DDRD	|=  (1 << PIND1); // TX
 270:	51 9a       	sbi	0x0a, 1	; 10
	//PORTD	|= ((1 << PIND0) | (1 << PIND1));
	UBRR0H = 0;
 272:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 3;
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = 0;
 27c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = ((1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0));
 280:	88 e9       	ldi	r24, 0x98	; 152
 282:	80 93 c1 00 	sts	0x00C1, r24
 286:	08 95       	ret

00000288 <__x_usart_putchar>:
}

void __x_usart_putchar(unsigned char c) {
	while (!(UCSR0A & (1 << UDRE0)));
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	90 81       	ld	r25, Z
 28e:	95 ff       	sbrs	r25, 5
 290:	fd cf       	rjmp	.-6      	; 0x28c <__x_usart_putchar+0x4>
	UDR0 = c;
 292:	80 93 c6 00 	sts	0x00C6, r24
 296:	08 95       	ret

00000298 <__x_usart_hex>:
}

unsigned char __x_usart_hex(unsigned char c) {
	if (c > 0x0f) return '0';
 298:	80 31       	cpi	r24, 0x10	; 16
 29a:	30 f4       	brcc	.+12     	; 0x2a8 <__x_usart_hex+0x10>
	if (c > 0x09) return ('A' + (c - 0x0A));
 29c:	8a 30       	cpi	r24, 0x0A	; 10
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__x_usart_hex+0xc>
 2a0:	89 5c       	subi	r24, 0xC9	; 201
 2a2:	08 95       	ret
	return c + '0';
 2a4:	80 5d       	subi	r24, 0xD0	; 208
 2a6:	08 95       	ret
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = c;
}

unsigned char __x_usart_hex(unsigned char c) {
	if (c > 0x0f) return '0';
 2a8:	80 e3       	ldi	r24, 0x30	; 48
	if (c > 0x09) return ('A' + (c - 0x0A));
	return c + '0';
}
 2aa:	08 95       	ret

000002ac <__x_usart_putint8h>:

void __x_usart_putint8h(unsigned char c) {
 2ac:	cf 93       	push	r28
 2ae:	c8 2f       	mov	r28, r24
	__x_usart_putchar(__x_usart_hex(c >> 4));
 2b0:	82 95       	swap	r24
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	f1 df       	rcall	.-30     	; 0x298 <__x_usart_hex>
 2b6:	e8 df       	rcall	.-48     	; 0x288 <__x_usart_putchar>
	__x_usart_putchar(__x_usart_hex(c & 0x0f));
 2b8:	8c 2f       	mov	r24, r28
 2ba:	8f 70       	andi	r24, 0x0F	; 15
 2bc:	ed df       	rcall	.-38     	; 0x298 <__x_usart_hex>
 2be:	e4 df       	rcall	.-56     	; 0x288 <__x_usart_putchar>
}
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <__leds_init>:
#include "i2c.h"



void __leds_init(void) {
	DDRB  |= (1<<PINB0);
 2c4:	20 9a       	sbi	0x04, 0	; 4
	DDRD  |= (1<<PIND7);
 2c6:	57 9a       	sbi	0x0a, 7	; 10
	PORTB |= (1<<PINB0);
 2c8:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (1<<PIND7);
 2ca:	5f 9a       	sbi	0x0b, 7	; 11
 2cc:	08 95       	ret

000002ce <main>:
}

int main(void)
{
	WDTCSR = 0;
 2ce:	10 92 60 00 	sts	0x0060, r1
	i2c_init();
 2d2:	4c df       	rcall	.-360    	; 0x16c <i2c_init>
	ds1307_init(DS1307_SQWE);
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	be df       	rcall	.-132    	; 0x254 <ds1307_init>
	
	
	
	
	__x_usart_init();
 2d8:	ca df       	rcall	.-108    	; 0x26e <__x_usart_init>
	__leds_init();
 2da:	f4 df       	rcall	.-24     	; 0x2c4 <__leds_init>
	
	asm("SEI");
 2dc:	78 94       	sei
		__x_usart_putint8h(ds1307_readb(0x02));
		__x_usart_putchar(':');
		__x_usart_putint8h(ds1307_readb(0x01));
		__x_usart_putchar(':');
		__x_usart_putint8h(ds1307_readb(0x00));
		__x_usart_putchar('\r');
 2de:	d8 ee       	ldi	r29, 0xE8	; 232
 2e0:	cd ef       	ldi	r28, 0xFD	; 253

	
    while(1)
    {

		__x_usart_putchar(' ');
 2e2:	80 e2       	ldi	r24, 0x20	; 32
 2e4:	d1 df       	rcall	.-94     	; 0x288 <__x_usart_putchar>
		__x_usart_putint8h(ds1307_readb(0x02));
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	74 df       	rcall	.-280    	; 0x1d2 <ds1307_readb>
 2ea:	e0 df       	rcall	.-64     	; 0x2ac <__x_usart_putint8h>
		__x_usart_putchar(':');
 2ec:	8a e3       	ldi	r24, 0x3A	; 58
 2ee:	cc df       	rcall	.-104    	; 0x288 <__x_usart_putchar>
		__x_usart_putint8h(ds1307_readb(0x01));
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	6f df       	rcall	.-290    	; 0x1d2 <ds1307_readb>
 2f4:	db df       	rcall	.-74     	; 0x2ac <__x_usart_putint8h>
		__x_usart_putchar(':');
 2f6:	8a e3       	ldi	r24, 0x3A	; 58
 2f8:	c7 df       	rcall	.-114    	; 0x288 <__x_usart_putchar>
		__x_usart_putint8h(ds1307_readb(0x00));
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	6a df       	rcall	.-300    	; 0x1d2 <ds1307_readb>
 2fe:	d6 df       	rcall	.-84     	; 0x2ac <__x_usart_putint8h>
		__x_usart_putchar('\r');
 300:	8d e0       	ldi	r24, 0x0D	; 13
 302:	c2 df       	rcall	.-124    	; 0x288 <__x_usart_putchar>
 304:	8d 2f       	mov	r24, r29
 306:	9c 2f       	mov	r25, r28
		
		for (i=0; i<65000; i++) asm("NOP");
 308:	00 00       	nop
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <__stack+0x9>
 310:	8d 2f       	mov	r24, r29
 312:	9c 2f       	mov	r25, r28
		for (i=0; i<65000; i++) asm("NOP");
 314:	00 00       	nop
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	00 97       	sbiw	r24, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <__stack+0x15>
 31c:	8d 2f       	mov	r24, r29
 31e:	9c 2f       	mov	r25, r28
		for (i=0; i<65000; i++) asm("NOP");
 320:	00 00       	nop
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <__stack+0x21>
 328:	dc cf       	rjmp	.-72     	; 0x2e2 <main+0x14>

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
