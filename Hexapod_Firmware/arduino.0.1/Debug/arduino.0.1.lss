
arduino.0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800200  0000120c  000012a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800264  00800264  00001304  2**0
                  ALLOC
  3 .stab         00000930  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000197  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004d7  00000000  00000000  00001eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001169  00000000  00000000  00002382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000863  00000000  00000000  000034eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000018dd  00000000  00000000  00003d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f0  00000000  00000000  0000562c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009a1  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000089c  00000000  00000000  000062bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000109  00000000  00000000  00006b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00006c62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__vector_54>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e0       	ldi	r30, 0x0C	; 12
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 36       	cpi	r26, 0x64	; 100
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a4 e6       	ldi	r26, 0x64	; 100
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 39       	cpi	r26, 0x99	; 153
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 04 09 	jmp	0x1208	; 0x1208 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	8f ef       	ldi	r24, 0xFF	; 255
     12c:	94 e3       	ldi	r25, 0x34	; 52
     12e:	ac e0       	ldi	r26, 0x0C	; 12
     130:	81 50       	subi	r24, 0x01	; 1
     132:	90 40       	sbci	r25, 0x00	; 0
     134:	a0 40       	sbci	r26, 0x00	; 0
     136:	e1 f7       	brne	.-8      	; 0x130 <main+0x6>
     138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x10>
     13a:	00 00       	nop

int main(void)
{
	_delay_ms(250);

	servo_init();
     13c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z10servo_initv>
	ir_init();
     140:	0e 94 92 05 	call	0xb24	; 0xb24 <_Z7ir_initv>
	bluetooth_init();
     144:	0e 94 51 06 	call	0xca2	; 0xca2 <_Z14bluetooth_initv>
	ultrasonic_init();
     148:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_Z15ultrasonic_initv>
	buttons_init();
     14c:	0e 94 98 02 	call	0x530	; 0x530 <_Z12buttons_initv>
	sei();
     150:	78 94       	sei
	
    while(1) {
		comm_exec();
     152:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_Z9comm_execv>
		move_proc();
     156:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z9move_procv>
		
		if (button_get_state(1)) move_enable(false);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z16button_get_stateh>
     160:	88 23       	and	r24, r24
     162:	19 f0       	breq	.+6      	; 0x16a <main+0x40>
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z11move_enableb>
		if (button_get_state(2)) move_enable(true);
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z16button_get_stateh>
     170:	88 23       	and	r24, r24
     172:	79 f3       	breq	.-34     	; 0x152 <main+0x28>
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_Z11move_enableb>
     17a:	eb cf       	rjmp	.-42     	; 0x152 <main+0x28>

0000017c <_Z17__mt10t7_get_lastl>:

#include "mt10t7.h"

char __mt10t7_get_last(long val) {
     17c:	1f 93       	push	r17
     17e:	16 2f       	mov	r17, r22
  long i = 0;
  i = val / 10;
     180:	2a e0       	ldi	r18, 0x0A	; 10
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	50 e0       	ldi	r21, 0x00	; 0
     188:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__divmodsi4>
  return (val - (i*10));
     18c:	22 0f       	add	r18, r18
     18e:	82 2f       	mov	r24, r18
     190:	88 0f       	add	r24, r24
     192:	88 0f       	add	r24, r24
     194:	28 0f       	add	r18, r24
}
     196:	81 2f       	mov	r24, r17
     198:	82 1b       	sub	r24, r18
     19a:	1f 91       	pop	r17
     19c:	08 95       	ret

0000019e <_Z14__mt10t7_writeccb>:

void __mt10t7_write(char lbyte, char hbyte, bool addr) {
  lbyte &= 0b00001111;
     19e:	8f 70       	andi	r24, 0x0F	; 15
  
  #ifdef MT10T7_DEBUG_LED
  MT10T7_PORT_LED ^= (1 << MT10T7_BIT_LED);
  #endif
  
  MT10T7_PORT_WR1 &= ~(1 << MT10T7_BIT_WR1);
     1a0:	eb e0       	ldi	r30, 0x0B	; 11
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	90 81       	ld	r25, Z
     1a6:	9f 7e       	andi	r25, 0xEF	; 239
     1a8:	90 83       	st	Z, r25
  if (addr == true) MT10T7_PORT_A0 &= ~(1 << MT10T7_BIT_A0); else MT10T7_PORT_A0 |= (1 << MT10T7_BIT_A0);
     1aa:	44 23       	and	r20, r20
     1ac:	21 f0       	breq	.+8      	; 0x1b6 <_Z14__mt10t7_writeccb+0x18>
     1ae:	90 81       	ld	r25, Z
     1b0:	9e 7f       	andi	r25, 0xFE	; 254
     1b2:	90 83       	st	Z, r25
     1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <_Z14__mt10t7_writeccb+0x22>
     1b6:	eb e0       	ldi	r30, 0x0B	; 11
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
     1ba:	90 81       	ld	r25, Z
     1bc:	91 60       	ori	r25, 0x01	; 1
     1be:	90 83       	st	Z, r25
  
  if (lbyte & 0b00000001) MT10T7_PORT_DB0 |= (1 << MT10T7_BIT_DB0); else MT10T7_PORT_DB0 &= ~(1 << MT10T7_BIT_DB0);
     1c0:	80 ff       	sbrs	r24, 0
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <_Z14__mt10t7_writeccb+0x2a>
     1c4:	40 9a       	sbi	0x08, 0	; 8
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <_Z14__mt10t7_writeccb+0x2c>
     1c8:	40 98       	cbi	0x08, 0	; 8
  if (lbyte & 0b00000010) MT10T7_PORT_DB1 |= (1 << MT10T7_BIT_DB1); else MT10T7_PORT_DB1 &= ~(1 << MT10T7_BIT_DB1);
     1ca:	81 ff       	sbrs	r24, 1
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <_Z14__mt10t7_writeccb+0x34>
     1ce:	a2 9a       	sbi	0x14, 2	; 20
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <_Z14__mt10t7_writeccb+0x36>
     1d2:	a2 98       	cbi	0x14, 2	; 20
  if (lbyte & 0b00000100) MT10T7_PORT_DB2 |= (1 << MT10T7_BIT_DB2); else MT10T7_PORT_DB2 &= ~(1 << MT10T7_BIT_DB2);
     1d4:	82 ff       	sbrs	r24, 2
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <_Z14__mt10t7_writeccb+0x3e>
     1d8:	a0 9a       	sbi	0x14, 0	; 20
     1da:	01 c0       	rjmp	.+2      	; 0x1de <_Z14__mt10t7_writeccb+0x40>
     1dc:	a0 98       	cbi	0x14, 0	; 20
  if (lbyte & 0b00001000) MT10T7_PORT_DB3 |= (1 << MT10T7_BIT_DB3); else MT10T7_PORT_DB3 &= ~(1 << MT10T7_BIT_DB3);
     1de:	83 ff       	sbrs	r24, 3
     1e0:	06 c0       	rjmp	.+12     	; 0x1ee <_Z14__mt10t7_writeccb+0x50>
     1e2:	eb e0       	ldi	r30, 0x0B	; 11
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
     1e6:	80 81       	ld	r24, Z
     1e8:	80 64       	ori	r24, 0x40	; 64
     1ea:	80 83       	st	Z, r24
     1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <_Z14__mt10t7_writeccb+0x5a>
     1ee:	eb e0       	ldi	r30, 0x0B	; 11
     1f0:	f1 e0       	ldi	r31, 0x01	; 1
     1f2:	80 81       	ld	r24, Z
     1f4:	8f 7b       	andi	r24, 0xBF	; 191
     1f6:	80 83       	st	Z, r24
	  
  if (addr == false) { 
     1f8:	44 23       	and	r20, r20
     1fa:	59 f5       	brne	.+86     	; 0x252 <_Z14__mt10t7_writeccb+0xb4>
	  MT10T7_PORT_WR1 |= (1 << MT10T7_BIT_WR1);
     1fc:	eb e0       	ldi	r30, 0x0B	; 11
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	80 81       	ld	r24, Z
     202:	80 61       	ori	r24, 0x10	; 16
     204:	80 83       	st	Z, r24
     206:	83 ef       	ldi	r24, 0xF3	; 243
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <_Z14__mt10t7_writeccb+0x6c>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <_Z14__mt10t7_writeccb+0x72>
     210:	00 00       	nop
	  _delay_ms(2);
	  MT10T7_PORT_WR1 &= (~(1 << MT10T7_BIT_WR1));
     212:	80 81       	ld	r24, Z
     214:	8f 7e       	andi	r24, 0xEF	; 239
     216:	80 83       	st	Z, r24
  return (val - (i*10));
}

void __mt10t7_write(char lbyte, char hbyte, bool addr) {
  lbyte &= 0b00001111;
  hbyte &= 0b00001111;
     218:	6f 70       	andi	r22, 0x0F	; 15
  if (addr == false) { 
	  MT10T7_PORT_WR1 |= (1 << MT10T7_BIT_WR1);
	  _delay_ms(2);
	  MT10T7_PORT_WR1 &= (~(1 << MT10T7_BIT_WR1));
	  
	  if (hbyte & 0b00000001) MT10T7_PORT_DB0 |= (1 << MT10T7_BIT_DB0); else MT10T7_PORT_DB0 &= ~(1 << MT10T7_BIT_DB0);
     21a:	60 ff       	sbrs	r22, 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <_Z14__mt10t7_writeccb+0x84>
     21e:	40 9a       	sbi	0x08, 0	; 8
     220:	01 c0       	rjmp	.+2      	; 0x224 <_Z14__mt10t7_writeccb+0x86>
     222:	40 98       	cbi	0x08, 0	; 8
	  if (hbyte & 0b00000010) MT10T7_PORT_DB1 |= (1 << MT10T7_BIT_DB1); else MT10T7_PORT_DB1 &= ~(1 << MT10T7_BIT_DB1);
     224:	61 ff       	sbrs	r22, 1
     226:	02 c0       	rjmp	.+4      	; 0x22c <_Z14__mt10t7_writeccb+0x8e>
     228:	a2 9a       	sbi	0x14, 2	; 20
     22a:	01 c0       	rjmp	.+2      	; 0x22e <_Z14__mt10t7_writeccb+0x90>
     22c:	a2 98       	cbi	0x14, 2	; 20
	  if (hbyte & 0b00000100) MT10T7_PORT_DB2 |= (1 << MT10T7_BIT_DB2); else MT10T7_PORT_DB2 &= ~(1 << MT10T7_BIT_DB2);
     22e:	62 ff       	sbrs	r22, 2
     230:	02 c0       	rjmp	.+4      	; 0x236 <_Z14__mt10t7_writeccb+0x98>
     232:	a0 9a       	sbi	0x14, 0	; 20
     234:	01 c0       	rjmp	.+2      	; 0x238 <_Z14__mt10t7_writeccb+0x9a>
     236:	a0 98       	cbi	0x14, 0	; 20
	  if (hbyte & 0b00001000) MT10T7_PORT_DB3 |= (1 << MT10T7_BIT_DB3); else MT10T7_PORT_DB3 &= ~(1 << MT10T7_BIT_DB3);
     238:	63 ff       	sbrs	r22, 3
     23a:	06 c0       	rjmp	.+12     	; 0x248 <_Z14__mt10t7_writeccb+0xaa>
     23c:	eb e0       	ldi	r30, 0x0B	; 11
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	80 81       	ld	r24, Z
     242:	80 64       	ori	r24, 0x40	; 64
     244:	80 83       	st	Z, r24
     246:	05 c0       	rjmp	.+10     	; 0x252 <_Z14__mt10t7_writeccb+0xb4>
     248:	eb e0       	ldi	r30, 0x0B	; 11
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	80 81       	ld	r24, Z
     24e:	8f 7b       	andi	r24, 0xBF	; 191
     250:	80 83       	st	Z, r24
  }
  MT10T7_PORT_WR1 |= (1 << MT10T7_BIT_WR1);
     252:	eb e0       	ldi	r30, 0x0B	; 11
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	80 81       	ld	r24, Z
     258:	80 61       	ori	r24, 0x10	; 16
     25a:	80 83       	st	Z, r24
     25c:	83 ef       	ldi	r24, 0xF3	; 243
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <_Z14__mt10t7_writeccb+0xc2>
     264:	00 c0       	rjmp	.+0      	; 0x266 <_Z14__mt10t7_writeccb+0xc8>
     266:	00 00       	nop
  _delay_ms(2);
  return;
}
     268:	08 95       	ret

0000026a <_Z15mt10t7_numWriteccc>:

void mt10t7_numWrite(char number, char pos, char is_dec) {
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	18 2f       	mov	r17, r24
     270:	86 2f       	mov	r24, r22
     272:	04 2f       	mov	r16, r20
  __mt10t7_write(pos, 0, true);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	41 e0       	ldi	r20, 0x01	; 1
     278:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     27c:	01 11       	cpse	r16, r1
     27e:	01 e0       	ldi	r16, 0x01	; 1
  if (is_dec > 1) is_dec = 1;
  if (number == 0) {
     280:	11 23       	and	r17, r17
     282:	39 f4       	brne	.+14     	; 0x292 <_Z15mt10t7_numWriteccc+0x28>
    __mt10t7_write(MT10T7_NUM_0_L, MT10T7_NUM_0_H | is_dec, false);
     284:	60 2f       	mov	r22, r16
     286:	6e 60       	ori	r22, 0x0E	; 14
     288:	8e e0       	ldi	r24, 0x0E	; 14
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     290:	56 c0       	rjmp	.+172    	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 1) {
     292:	11 30       	cpi	r17, 0x01	; 1
     294:	39 f4       	brne	.+14     	; 0x2a4 <_Z15mt10t7_numWriteccc+0x3a>
    __mt10t7_write(MT10T7_NUM_1_L, MT10T7_NUM_1_H | is_dec, false);
     296:	60 2f       	mov	r22, r16
     298:	66 60       	ori	r22, 0x06	; 6
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     2a2:	4d c0       	rjmp	.+154    	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 2) {
     2a4:	12 30       	cpi	r17, 0x02	; 2
     2a6:	39 f4       	brne	.+14     	; 0x2b6 <_Z15mt10t7_numWriteccc+0x4c>
    __mt10t7_write(MT10T7_NUM_2_L, MT10T7_NUM_2_H | is_dec, false);
     2a8:	60 2f       	mov	r22, r16
     2aa:	62 60       	ori	r22, 0x02	; 2
     2ac:	8f e0       	ldi	r24, 0x0F	; 15
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     2b4:	44 c0       	rjmp	.+136    	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 3) {
     2b6:	13 30       	cpi	r17, 0x03	; 3
     2b8:	39 f4       	brne	.+14     	; 0x2c8 <_Z15mt10t7_numWriteccc+0x5e>
    __mt10t7_write(MT10T7_NUM_3_L, MT10T7_NUM_3_H | is_dec, false);
     2ba:	60 2f       	mov	r22, r16
     2bc:	66 60       	ori	r22, 0x06	; 6
     2be:	8d e0       	ldi	r24, 0x0D	; 13
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     2c6:	3b c0       	rjmp	.+118    	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 4) {
     2c8:	14 30       	cpi	r17, 0x04	; 4
     2ca:	39 f4       	brne	.+14     	; 0x2da <_Z15mt10t7_numWriteccc+0x70>
    __mt10t7_write(MT10T7_NUM_4_L, MT10T7_NUM_4_H | is_dec, false);
     2cc:	60 2f       	mov	r22, r16
     2ce:	6e 60       	ori	r22, 0x0E	; 14
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     2d8:	32 c0       	rjmp	.+100    	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 5) {
     2da:	15 30       	cpi	r17, 0x05	; 5
     2dc:	39 f4       	brne	.+14     	; 0x2ec <_Z15mt10t7_numWriteccc+0x82>
    __mt10t7_write(MT10T7_NUM_5_L, MT10T7_NUM_5_H | is_dec, false);
     2de:	60 2f       	mov	r22, r16
     2e0:	6c 60       	ori	r22, 0x0C	; 12
     2e2:	8d e0       	ldi	r24, 0x0D	; 13
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     2ea:	29 c0       	rjmp	.+82     	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 6) {
     2ec:	16 30       	cpi	r17, 0x06	; 6
     2ee:	39 f4       	brne	.+14     	; 0x2fe <_Z15mt10t7_numWriteccc+0x94>
    __mt10t7_write(MT10T7_NUM_6_L, MT10T7_NUM_6_H | is_dec, false);
     2f0:	60 2f       	mov	r22, r16
     2f2:	6c 60       	ori	r22, 0x0C	; 12
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     2fc:	20 c0       	rjmp	.+64     	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 7) {
     2fe:	17 30       	cpi	r17, 0x07	; 7
     300:	39 f4       	brne	.+14     	; 0x310 <_Z15mt10t7_numWriteccc+0xa6>
    __mt10t7_write(MT10T7_NUM_7_L, MT10T7_NUM_7_H | is_dec, false);
     302:	60 2f       	mov	r22, r16
     304:	66 60       	ori	r22, 0x06	; 6
     306:	88 e0       	ldi	r24, 0x08	; 8
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     30e:	17 c0       	rjmp	.+46     	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 8) {
     310:	18 30       	cpi	r17, 0x08	; 8
     312:	39 f4       	brne	.+14     	; 0x322 <_Z15mt10t7_numWriteccc+0xb8>
    __mt10t7_write(MT10T7_NUM_8_L, MT10T7_NUM_8_H | is_dec, false);
     314:	60 2f       	mov	r22, r16
     316:	6e 60       	ori	r22, 0x0E	; 14
     318:	8f e0       	ldi	r24, 0x0F	; 15
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     320:	0e c0       	rjmp	.+28     	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else if (number == 9) {
     322:	19 30       	cpi	r17, 0x09	; 9
     324:	39 f4       	brne	.+14     	; 0x334 <_Z15mt10t7_numWriteccc+0xca>
    __mt10t7_write(MT10T7_NUM_9_L, MT10T7_NUM_9_H | is_dec, false);
     326:	60 2f       	mov	r22, r16
     328:	6e 60       	ori	r22, 0x0E	; 14
     32a:	8d e0       	ldi	r24, 0x0D	; 13
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     332:	05 c0       	rjmp	.+10     	; 0x33e <_Z15mt10t7_numWriteccc+0xd4>
  } else {
    __mt10t7_write(0, 0, false);
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
  }
}
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	08 95       	ret

00000344 <_Z21mt10t7_display_numberl>:

void mt10t7_display_number(long val) {
     344:	8f 92       	push	r8
     346:	9f 92       	push	r9
     348:	af 92       	push	r10
     34a:	bf 92       	push	r11
     34c:	df 92       	push	r13
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	7b 01       	movw	r14, r22
     358:	8c 01       	movw	r16, r24
  char i = 0;
  char buf = 0;
  for (i=9; i>=0; i--) {
     35a:	0f 2e       	mov	r0, r31
     35c:	f9 e0       	ldi	r31, 0x09	; 9
     35e:	df 2e       	mov	r13, r31
     360:	f0 2d       	mov	r31, r0
    buf = __mt10t7_get_last(val);
    mt10t7_numWrite(buf, i, 0);
    val = val / 10;
     362:	0f 2e       	mov	r0, r31
     364:	fa e0       	ldi	r31, 0x0A	; 10
     366:	8f 2e       	mov	r8, r31
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	9f 2e       	mov	r9, r31
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	af 2e       	mov	r10, r31
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	bf 2e       	mov	r11, r31
     374:	f0 2d       	mov	r31, r0

void mt10t7_display_number(long val) {
  char i = 0;
  char buf = 0;
  for (i=9; i>=0; i--) {
    buf = __mt10t7_get_last(val);
     376:	c8 01       	movw	r24, r16
     378:	b7 01       	movw	r22, r14
     37a:	0e 94 be 00 	call	0x17c	; 0x17c <_Z17__mt10t7_get_lastl>
    mt10t7_numWrite(buf, i, 0);
     37e:	6d 2d       	mov	r22, r13
     380:	40 e0       	ldi	r20, 0x00	; 0
     382:	0e 94 35 01 	call	0x26a	; 0x26a <_Z15mt10t7_numWriteccc>
    val = val / 10;
     386:	c8 01       	movw	r24, r16
     388:	b7 01       	movw	r22, r14
     38a:	a5 01       	movw	r20, r10
     38c:	94 01       	movw	r18, r8
     38e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__divmodsi4>
     392:	79 01       	movw	r14, r18
     394:	8a 01       	movw	r16, r20
    if (val == 0) return;
     396:	21 15       	cp	r18, r1
     398:	31 05       	cpc	r19, r1
     39a:	41 05       	cpc	r20, r1
     39c:	51 05       	cpc	r21, r1
     39e:	11 f0       	breq	.+4      	; 0x3a4 <_Z21mt10t7_display_numberl+0x60>
}

void mt10t7_display_number(long val) {
  char i = 0;
  char buf = 0;
  for (i=9; i>=0; i--) {
     3a0:	da 94       	dec	r13
     3a2:	e9 cf       	rjmp	.-46     	; 0x376 <_Z21mt10t7_display_numberl+0x32>
    buf = __mt10t7_get_last(val);
    mt10t7_numWrite(buf, i, 0);
    val = val / 10;
    if (val == 0) return;
  }
}
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	bf 90       	pop	r11
     3b0:	af 90       	pop	r10
     3b2:	9f 90       	pop	r9
     3b4:	8f 90       	pop	r8
     3b6:	08 95       	ret

000003b8 <_Z19__mt10t7_power_initv>:

#ifdef MT10T7_DEBUG_CONN
void __mt10t7_power_init(void) {
	MT10T7_DDR_E  |= (1 << MT10T7_BIT_E);
     3b8:	3e 9a       	sbi	0x07, 6	; 7
	MT10T7_PORT_E |= (1 << MT10T7_BIT_E);
     3ba:	46 9a       	sbi	0x08, 6	; 8
	
	MT10T7_DDR_V0  |= (1 << MT10T7_BIT_V0);
     3bc:	3c 9a       	sbi	0x07, 4	; 7
	MT10T7_PORT_V0 &= ~(1 << MT10T7_BIT_V0);
     3be:	44 98       	cbi	0x08, 4	; 8
	
	MT10T7_DDR_GND  |= (1 << MT10T7_BIT_GND);
     3c0:	3a 9a       	sbi	0x07, 2	; 7
	MT10T7_PORT_GND &= ~(1 << MT10T7_BIT_GND);
     3c2:	42 98       	cbi	0x08, 2	; 8
}
     3c4:	08 95       	ret

000003c6 <_Z19mt10t7_display_initv>:
    MT10T7_DDR_LED  |= (1 << MT10T7_BIT_LED);
	MT10T7_PORT_LED &= ~(1 << MT10T7_BIT_LED);
}
#endif

void mt10t7_display_init(void) {
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
	#ifdef MT10T7_DEBUG_CONN
	__mt10t7_power_init();
     3ca:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z19__mt10t7_power_initv>
	#endif
	#ifdef MT10T7_DEBUG_LED
	__mt10t7_led_init();
	#endif
	MT10T7_DDR_DB0  |= (1 << MT10T7_BIT_DB0);
     3ce:	38 9a       	sbi	0x07, 0	; 7
	MT10T7_PORT_DB0 &= ~(1 << MT10T7_BIT_DB0);
     3d0:	40 98       	cbi	0x08, 0	; 8
	
	MT10T7_DDR_DB1  |= (1 << MT10T7_BIT_DB1);
     3d2:	9a 9a       	sbi	0x13, 2	; 19
	MT10T7_PORT_DB1 &= ~(1 << MT10T7_BIT_DB1);
     3d4:	a2 98       	cbi	0x14, 2	; 20
	
	MT10T7_DDR_DB2  |= (1 << MT10T7_BIT_DB2);
     3d6:	98 9a       	sbi	0x13, 0	; 19
	MT10T7_PORT_DB2 &= ~(1 << MT10T7_BIT_DB2);
     3d8:	a0 98       	cbi	0x14, 0	; 20
	
	MT10T7_DDR_DB3  |= (1 << MT10T7_BIT_DB3);
     3da:	aa e0       	ldi	r26, 0x0A	; 10
     3dc:	b1 e0       	ldi	r27, 0x01	; 1
     3de:	8c 91       	ld	r24, X
     3e0:	80 64       	ori	r24, 0x40	; 64
     3e2:	8c 93       	st	X, r24
	MT10T7_PORT_DB3 &= ~(1 << MT10T7_BIT_DB3);
     3e4:	eb e0       	ldi	r30, 0x0B	; 11
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	80 81       	ld	r24, Z
     3ea:	8f 7b       	andi	r24, 0xBF	; 191
     3ec:	80 83       	st	Z, r24
	
    MT10T7_DDR_WR1  |= (1 << MT10T7_BIT_WR1);
     3ee:	8c 91       	ld	r24, X
     3f0:	80 61       	ori	r24, 0x10	; 16
     3f2:	8c 93       	st	X, r24
	MT10T7_PORT_WR1 &= ~(1 << MT10T7_BIT_WR1);
     3f4:	80 81       	ld	r24, Z
     3f6:	8f 7e       	andi	r24, 0xEF	; 239
     3f8:	80 83       	st	Z, r24
	
	MT10T7_DDR_WR2  |= (1 << MT10T7_BIT_WR2);
     3fa:	8c 91       	ld	r24, X
     3fc:	84 60       	ori	r24, 0x04	; 4
     3fe:	8c 93       	st	X, r24
	MT10T7_PORT_WR2 &= ~(1 << MT10T7_BIT_WR2);
     400:	80 81       	ld	r24, Z
     402:	8b 7f       	andi	r24, 0xFB	; 251
     404:	80 83       	st	Z, r24
	
	MT10T7_DDR_A0   |= (1 << MT10T7_BIT_A0);
     406:	8c 91       	ld	r24, X
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	8c 93       	st	X, r24
	MT10T7_PORT_A0  &= ~(1 << MT10T7_BIT_A0);
     40c:	80 81       	ld	r24, Z
     40e:	8e 7f       	andi	r24, 0xFE	; 254
     410:	80 83       	st	Z, r24
	
	__mt10t7_write(0, 0, true);
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     41c:	ca e0       	ldi	r28, 0x0A	; 10
     41e:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<10; i++) __mt10t7_write(0, 0, false);
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     42a:	21 97       	sbiw	r28, 0x01	; 1
     42c:	c9 f7       	brne	.-14     	; 0x420 <_Z19mt10t7_display_initv+0x5a>
	
	return;
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <_Z12mt10t7_clearv>:

void mt10t7_clear(void) {
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
	__mt10t7_write(0, 0, true);
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	41 e0       	ldi	r20, 0x01	; 1
     43e:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     442:	ca e0       	ldi	r28, 0x0A	; 10
     444:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<10; i++) __mt10t7_write(0, 0, false);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z14__mt10t7_writeccb>
     450:	21 97       	sbiw	r28, 0x01	; 1
     452:	c9 f7       	brne	.-14     	; 0x446 <_Z12mt10t7_clearv+0x12>
	
	return;
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <_Z24__ultrasonic_write_pulsev>:


bool move_enable_disable = false;

void __ultrasonic_write_pulse(void) {
	PORTE |=  (1 << 4);
     45a:	74 9a       	sbi	0x0e, 4	; 14
	TCNT1 = 0;
     45c:	10 92 85 00 	sts	0x0085, r1
     460:	10 92 84 00 	sts	0x0084, r1
	while (TCNT1 < 22) {};
     464:	e4 e8       	ldi	r30, 0x84	; 132
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	86 31       	cpi	r24, 0x16	; 22
     46e:	91 05       	cpc	r25, r1
     470:	d8 f3       	brcs	.-10     	; 0x468 <_Z24__ultrasonic_write_pulsev+0xe>
	PORTE &= ~(1 << 4);
     472:	74 98       	cbi	0x0e, 4	; 14
}
     474:	08 95       	ret

00000476 <_Z23__ultrasonic_read_pulsev>:

int __ultrasonic_read_pulse(void) {
	unsigned int tmr = 0;
	__ultrasonic_write_pulse();
     476:	0e 94 2d 02 	call	0x45a	; 0x45a <_Z24__ultrasonic_write_pulsev>
	
	unsigned char c = 0;
	while (c == 0) {
		c = PINE & (1 << PINE5);
     47a:	8c b1       	in	r24, 0x0c	; 12
int __ultrasonic_read_pulse(void) {
	unsigned int tmr = 0;
	__ultrasonic_write_pulse();
	
	unsigned char c = 0;
	while (c == 0) {
     47c:	98 2f       	mov	r25, r24
     47e:	90 72       	andi	r25, 0x20	; 32
     480:	85 ff       	sbrs	r24, 5
     482:	fb cf       	rjmp	.-10     	; 0x47a <_Z23__ultrasonic_read_pulsev+0x4>
		c = PINE & (1 << PINE5);
	}
	
	TCNT1 = 0;
     484:	10 92 85 00 	sts	0x0085, r1
     488:	10 92 84 00 	sts	0x0084, r1
	while (c > 0) {
     48c:	99 23       	and	r25, r25
     48e:	b1 f0       	breq	.+44     	; 0x4bc <_Z23__ultrasonic_read_pulsev+0x46>
		tmr = TCNT1;
     490:	20 91 84 00 	lds	r18, 0x0084
     494:	30 91 85 00 	lds	r19, 0x0085
		if (tmr > 60000) goto TMR_ERR;
     498:	8a ee       	ldi	r24, 0xEA	; 234
     49a:	21 36       	cpi	r18, 0x61	; 97
     49c:	38 07       	cpc	r19, r24
     49e:	40 f0       	brcs	.+16     	; 0x4b0 <_Z23__ultrasonic_read_pulsev+0x3a>
     4a0:	10 c0       	rjmp	.+32     	; 0x4c2 <_Z23__ultrasonic_read_pulsev+0x4c>
		c = PINE & (1 << PINE5);
	}
	
	TCNT1 = 0;
	while (c > 0) {
		tmr = TCNT1;
     4a2:	20 81       	ld	r18, Z
     4a4:	31 81       	ldd	r19, Z+1	; 0x01
		if (tmr > 60000) goto TMR_ERR;
     4a6:	8a ee       	ldi	r24, 0xEA	; 234
     4a8:	21 36       	cpi	r18, 0x61	; 97
     4aa:	38 07       	cpc	r19, r24
     4ac:	18 f0       	brcs	.+6      	; 0x4b4 <_Z23__ultrasonic_read_pulsev+0x3e>
     4ae:	0c c0       	rjmp	.+24     	; 0x4c8 <_Z23__ultrasonic_read_pulsev+0x52>
		c = PINE & (1 << PINE5);
	}
	
	TCNT1 = 0;
	while (c > 0) {
		tmr = TCNT1;
     4b0:	e4 e8       	ldi	r30, 0x84	; 132
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
		if (tmr > 60000) goto TMR_ERR;
		c = PINE & (1 << PINE5);
     4b4:	8c b1       	in	r24, 0x0c	; 12
	while (c == 0) {
		c = PINE & (1 << PINE5);
	}
	
	TCNT1 = 0;
	while (c > 0) {
     4b6:	85 fd       	sbrc	r24, 5
     4b8:	f4 cf       	rjmp	.-24     	; 0x4a2 <_Z23__ultrasonic_read_pulsev+0x2c>
     4ba:	08 c0       	rjmp	.+16     	; 0x4cc <_Z23__ultrasonic_read_pulsev+0x56>
	while (TCNT1 < 22) {};
	PORTE &= ~(1 << 4);
}

int __ultrasonic_read_pulse(void) {
	unsigned int tmr = 0;
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
	while (c > 0) {
		tmr = TCNT1;
		if (tmr > 60000) goto TMR_ERR;
		c = PINE & (1 << PINE5);
	};
	return tmr;
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <_Z23__ultrasonic_read_pulsev+0x56>
	TMR_ERR:
		return -1;
     4c2:	2f ef       	ldi	r18, 0xFF	; 255
     4c4:	3f ef       	ldi	r19, 0xFF	; 255
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <_Z23__ultrasonic_read_pulsev+0x56>
     4c8:	2f ef       	ldi	r18, 0xFF	; 255
     4ca:	3f ef       	ldi	r19, 0xFF	; 255
}
     4cc:	82 2f       	mov	r24, r18
     4ce:	93 2f       	mov	r25, r19
     4d0:	08 95       	ret

000004d2 <_Z15ultrasonic_initv>:

void ultrasonic_init(void) {
	// Ultrasonic HR-SC04 sensor
	DDRE  |=  (1 << 4); //trig
     4d2:	6c 9a       	sbi	0x0d, 4	; 13
	DDRE  &= ~(1 << 5); //echo
     4d4:	6d 98       	cbi	0x0d, 5	; 13
	PORTE &= ~(1 << 4);
     4d6:	74 98       	cbi	0x0e, 4	; 14
	PORTE |=  (1 << 5);
     4d8:	75 9a       	sbi	0x0e, 5	; 14
	// Timer for delay & sensors
	TCCR1A = 0;
     4da:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS11);
     4de:	e1 e8       	ldi	r30, 0x81	; 129
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	80 83       	st	Z, r24
	TCCR3C = 0;
     4e8:	10 92 92 00 	sts	0x0092, r1
	TCNT1 = 0xFFFF;
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	9f ef       	ldi	r25, 0xFF	; 255
     4f0:	90 93 85 00 	sts	0x0085, r25
     4f4:	80 93 84 00 	sts	0x0084, r24
	TIMSK1 = 0;
     4f8:	10 92 6f 00 	sts	0x006F, r1
}
     4fc:	08 95       	ret

000004fe <_Z12get_distancev>:

//Distance = ((Duration of high level)*(Sonic :340m/s))/2
int get_distance(void) {
	unsigned int tmr = __ultrasonic_read_pulse();
     4fe:	0e 94 3b 02 	call	0x476	; 0x476 <_Z23__ultrasonic_read_pulsev>
     502:	28 2f       	mov	r18, r24
     504:	39 2f       	mov	r19, r25
	if (tmr < USS_ERROR_MIN_RANGE) return -1;
     506:	24 36       	cpi	r18, 0x64	; 100
     508:	31 05       	cpc	r19, r1
     50a:	50 f0       	brcs	.+20     	; 0x520 <_Z12get_distancev+0x22>
	if (tmr > USS_ERROR_MAX_RANGE) return -2;
     50c:	87 e2       	ldi	r24, 0x27	; 39
     50e:	21 31       	cpi	r18, 0x11	; 17
     510:	38 07       	cpc	r19, r24
     512:	48 f4       	brcc	.+18     	; 0x526 <_Z12get_distancev+0x28>
	return (tmr / 58);
     514:	c9 01       	movw	r24, r18
     516:	6a e3       	ldi	r22, 0x3A	; 58
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	0e 94 0b 07 	call	0xe16	; 0xe16 <__udivmodhi4>
     51e:	05 c0       	rjmp	.+10     	; 0x52a <_Z12get_distancev+0x2c>
}

//Distance = ((Duration of high level)*(Sonic :340m/s))/2
int get_distance(void) {
	unsigned int tmr = __ultrasonic_read_pulse();
	if (tmr < USS_ERROR_MIN_RANGE) return -1;
     520:	6f ef       	ldi	r22, 0xFF	; 255
     522:	7f ef       	ldi	r23, 0xFF	; 255
     524:	02 c0       	rjmp	.+4      	; 0x52a <_Z12get_distancev+0x2c>
	if (tmr > USS_ERROR_MAX_RANGE) return -2;
     526:	6e ef       	ldi	r22, 0xFE	; 254
     528:	7f ef       	ldi	r23, 0xFF	; 255
	return (tmr / 58);
}
     52a:	86 2f       	mov	r24, r22
     52c:	97 2f       	mov	r25, r23
     52e:	08 95       	ret

00000530 <_Z12buttons_initv>:

void buttons_init(void) {
	DDRC  &= ~((1 << 6) | (1 << 4) | (1 << 2));
     530:	87 b1       	in	r24, 0x07	; 7
     532:	8b 7a       	andi	r24, 0xAB	; 171
     534:	87 b9       	out	0x07, r24	; 7
	PORTC |=  ((1 << 6) | (1 << 4) | (1 << 2));
     536:	88 b1       	in	r24, 0x08	; 8
     538:	84 65       	ori	r24, 0x54	; 84
     53a:	88 b9       	out	0x08, r24	; 8
}
     53c:	08 95       	ret

0000053e <_Z16button_get_stateh>:

bool button_get_state(unsigned char n) {
	if (n == 1) {
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	21 f4       	brne	.+8      	; 0x54a <_Z16button_get_stateh+0xc>
		return (BTN_PORT & BTN_1) ? false : true;
     542:	36 9b       	sbis	0x06, 6	; 6
     544:	11 c0       	rjmp	.+34     	; 0x568 <_Z16button_get_stateh+0x2a>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	08 95       	ret
	} else if (n == 2) {
     54a:	82 30       	cpi	r24, 0x02	; 2
     54c:	29 f4       	brne	.+10     	; 0x558 <_Z16button_get_stateh+0x1a>
		return (BTN_PORT & BTN_2) ? false : true;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	34 9b       	sbis	0x06, 4	; 6
     552:	0a c0       	rjmp	.+20     	; 0x568 <_Z16button_get_stateh+0x2a>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	08 95       	ret
	} else if (n == 3) {
     558:	83 30       	cpi	r24, 0x03	; 3
     55a:	29 f4       	brne	.+10     	; 0x566 <_Z16button_get_stateh+0x28>
		return (BTN_PORT & BTN_3) ? false : true;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	32 9b       	sbis	0x06, 2	; 6
     560:	03 c0       	rjmp	.+6      	; 0x568 <_Z16button_get_stateh+0x2a>
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	08 95       	ret
	} else {
		return false;
     566:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     568:	08 95       	ret

0000056a <_Z9move_procv>:

void move_proc(void) {
	if (move_enable_disable) return;
     56a:	80 91 64 02 	lds	r24, 0x0264
     56e:	88 23       	and	r24, r24
     570:	79 f5       	brne	.+94     	; 0x5d0 <_Z9move_procv+0x66>
	
	if ((ir_read_right()) && (ir_read_left())) {
     572:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_Z13ir_read_rightv>
     576:	88 23       	and	r24, r24
     578:	09 f1       	breq	.+66     	; 0x5bc <_Z9move_procv+0x52>
     57a:	0e 94 bc 05 	call	0xb78	; 0xb78 <_Z12ir_read_leftv>
     57e:	88 23       	and	r24, r24
     580:	e9 f0       	breq	.+58     	; 0x5bc <_Z9move_procv+0x52>
		go_back();
     582:	0e 94 45 05 	call	0xa8a	; 0xa8a <_Z7go_backv>
		return;
     586:	08 95       	ret
	}
	
	if ((ir_read_right()) && (ir_read_left() == false)) {
     588:	0e 94 bc 05 	call	0xb78	; 0xb78 <_Z12ir_read_leftv>
     58c:	88 23       	and	r24, r24
     58e:	d1 f4       	brne	.+52     	; 0x5c4 <_Z9move_procv+0x5a>
		rotate_left();
     590:	0e 94 74 05 	call	0xae8	; 0xae8 <_Z11rotate_leftv>
		rotate_left();
     594:	0e 94 74 05 	call	0xae8	; 0xae8 <_Z11rotate_leftv>
		rotate_left();
     598:	0e 94 74 05 	call	0xae8	; 0xae8 <_Z11rotate_leftv>
		go_back();
     59c:	0e 94 45 05 	call	0xa8a	; 0xa8a <_Z7go_backv>
		return;
     5a0:	08 95       	ret
	}
	
	if ((ir_read_right() == false) && (ir_read_left())) {
     5a2:	0e 94 bc 05 	call	0xb78	; 0xb78 <_Z12ir_read_leftv>
     5a6:	88 23       	and	r24, r24
     5a8:	89 f0       	breq	.+34     	; 0x5cc <_Z9move_procv+0x62>
		rotate_right();
     5aa:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Z12rotate_rightv>
		rotate_right();
     5ae:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Z12rotate_rightv>
		rotate_right();
     5b2:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Z12rotate_rightv>
		go_back();
     5b6:	0e 94 45 05 	call	0xa8a	; 0xa8a <_Z7go_backv>
		return;
     5ba:	08 95       	ret
	if ((ir_read_right()) && (ir_read_left())) {
		go_back();
		return;
	}
	
	if ((ir_read_right()) && (ir_read_left() == false)) {
     5bc:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_Z13ir_read_rightv>
     5c0:	88 23       	and	r24, r24
     5c2:	11 f7       	brne	.-60     	; 0x588 <_Z9move_procv+0x1e>
		rotate_left();
		go_back();
		return;
	}
	
	if ((ir_read_right() == false) && (ir_read_left())) {
     5c4:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_Z13ir_read_rightv>
     5c8:	88 23       	and	r24, r24
     5ca:	59 f3       	breq	.-42     	; 0x5a2 <_Z9move_procv+0x38>
		rotate_right();
		go_back();
		return;
	}
	
	go_next();
     5cc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z7go_nextv>
     5d0:	08 95       	ret

000005d2 <_Z11move_enableb>:
}

void move_enable(bool n) {
	move_enable_disable = n;
     5d2:	80 93 64 02 	sts	0x0264, r24
}
     5d6:	08 95       	ret

000005d8 <_Z17__macro_0001_movehhhhb>:

volatile unsigned char ir1[IR_MAX_ARRAY] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
volatile unsigned char ir2[IR_MAX_ARRAY] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
volatile unsigned char ir_counter = 0;

void __macro_0001_move(unsigned char a1, unsigned char a2, unsigned char b1, unsigned char b2, bool up_down = true) {
     5d8:	0f 93       	push	r16
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
	unsigned char i = 0;
	
	servo[a1] += LEG_UP_DOWN_HEIGHT;
     5de:	a8 2f       	mov	r26, r24
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	e0 e0       	ldi	r30, 0x00	; 0
     5e4:	f2 e0       	ldi	r31, 0x02	; 2
     5e6:	ef 01       	movw	r28, r30
     5e8:	ca 0f       	add	r28, r26
     5ea:	db 1f       	adc	r29, r27
     5ec:	88 81       	ld	r24, Y
     5ee:	82 5f       	subi	r24, 0xF2	; 242
     5f0:	88 83       	st	Y, r24
	servo[a2] -= LEG_UP_DOWN_HEIGHT;
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	e6 0f       	add	r30, r22
     5f6:	f7 1f       	adc	r31, r23
     5f8:	80 81       	ld	r24, Z
     5fa:	8e 50       	subi	r24, 0x0E	; 14
     5fc:	80 83       	st	Z, r24
	servo_counter = LEG_UP_WAIT;
     5fe:	8c e0       	ldi	r24, 0x0C	; 12
     600:	80 93 67 02 	sts	0x0267, r24
	while (servo_counter > 0) asm("NOP");
     604:	80 91 67 02 	lds	r24, 0x0267
     608:	88 23       	and	r24, r24
     60a:	29 f0       	breq	.+10     	; 0x616 <_Z17__macro_0001_movehhhhb+0x3e>
     60c:	00 00       	nop
     60e:	80 91 67 02 	lds	r24, 0x0267
     612:	88 23       	and	r24, r24
     614:	d9 f7       	brne	.-10     	; 0x60c <_Z17__macro_0001_movehhhhb+0x34>
	
	if (up_down) {
     616:	00 23       	and	r16, r16
     618:	71 f0       	breq	.+28     	; 0x636 <_Z17__macro_0001_movehhhhb+0x5e>
		servo[b1] -= STEP_SIZE;
     61a:	e0 e0       	ldi	r30, 0x00	; 0
     61c:	f2 e0       	ldi	r31, 0x02	; 2
     61e:	ef 01       	movw	r28, r30
     620:	c4 0f       	add	r28, r20
     622:	d1 1d       	adc	r29, r1
     624:	88 81       	ld	r24, Y
     626:	8c 50       	subi	r24, 0x0C	; 12
     628:	88 83       	st	Y, r24
		servo[b2] += STEP_SIZE;
     62a:	e2 0f       	add	r30, r18
     62c:	f1 1d       	adc	r31, r1
     62e:	80 81       	ld	r24, Z
     630:	84 5f       	subi	r24, 0xF4	; 244
     632:	80 83       	st	Z, r24
     634:	0d c0       	rjmp	.+26     	; 0x650 <_Z17__macro_0001_movehhhhb+0x78>
	} else {
		servo[b1] += STEP_SIZE;
     636:	e0 e0       	ldi	r30, 0x00	; 0
     638:	f2 e0       	ldi	r31, 0x02	; 2
     63a:	ef 01       	movw	r28, r30
     63c:	c4 0f       	add	r28, r20
     63e:	d1 1d       	adc	r29, r1
     640:	88 81       	ld	r24, Y
     642:	84 5f       	subi	r24, 0xF4	; 244
     644:	88 83       	st	Y, r24
		servo[b2] -= STEP_SIZE;
     646:	e2 0f       	add	r30, r18
     648:	f1 1d       	adc	r31, r1
     64a:	80 81       	ld	r24, Z
     64c:	8c 50       	subi	r24, 0x0C	; 12
     64e:	80 83       	st	Z, r24
	}
	servo_counter = LEG_MOVE_WAIT;
     650:	86 e4       	ldi	r24, 0x46	; 70
     652:	80 93 67 02 	sts	0x0267, r24
	while (servo_counter > 0) asm("NOP");
     656:	80 91 67 02 	lds	r24, 0x0267
     65a:	88 23       	and	r24, r24
     65c:	39 f0       	breq	.+14     	; 0x66c <_Z17__macro_0001_movehhhhb+0x94>
     65e:	00 00       	nop
     660:	80 91 67 02 	lds	r24, 0x0267
     664:	88 23       	and	r24, r24
     666:	d9 f7       	brne	.-10     	; 0x65e <_Z17__macro_0001_movehhhhb+0x86>
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	01 c0       	rjmp	.+2      	; 0x66e <_Z17__macro_0001_movehhhhb+0x96>
     66c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (i=0; i<LEG_UP_DOWN_HEIGHT; i++) {
		servo[a1]--;
     66e:	e0 e0       	ldi	r30, 0x00	; 0
     670:	f2 e0       	ldi	r31, 0x02	; 2
     672:	ae 0f       	add	r26, r30
     674:	bf 1f       	adc	r27, r31
		servo[a2]++;
     676:	e6 0f       	add	r30, r22
     678:	f7 1f       	adc	r31, r23
	}
	servo_counter = LEG_MOVE_WAIT;
	while (servo_counter > 0) asm("NOP");
	
	for (i=0; i<LEG_UP_DOWN_HEIGHT; i++) {
		servo[a1]--;
     67a:	8c 91       	ld	r24, X
     67c:	81 50       	subi	r24, 0x01	; 1
     67e:	8c 93       	st	X, r24
		servo[a2]++;
     680:	80 81       	ld	r24, Z
     682:	8f 5f       	subi	r24, 0xFF	; 255
     684:	80 83       	st	Z, r24
		servo_counter = (i*LEG_DOWN_SPEED);
     686:	90 93 67 02 	sts	0x0267, r25
		while (servo_counter > 0) asm("NOP");
     68a:	80 91 67 02 	lds	r24, 0x0267
     68e:	88 23       	and	r24, r24
     690:	29 f0       	breq	.+10     	; 0x69c <_Z17__macro_0001_movehhhhb+0xc4>
     692:	00 00       	nop
     694:	80 91 67 02 	lds	r24, 0x0267
     698:	88 23       	and	r24, r24
     69a:	d9 f7       	brne	.-10     	; 0x692 <_Z17__macro_0001_movehhhhb+0xba>
		servo[b2] -= STEP_SIZE;
	}
	servo_counter = LEG_MOVE_WAIT;
	while (servo_counter > 0) asm("NOP");
	
	for (i=0; i<LEG_UP_DOWN_HEIGHT; i++) {
     69c:	9f 5f       	subi	r25, 0xFF	; 255
     69e:	9e 30       	cpi	r25, 0x0E	; 14
     6a0:	61 f7       	brne	.-40     	; 0x67a <_Z17__macro_0001_movehhhhb+0xa2>
		servo[a2]++;
		servo_counter = (i*LEG_DOWN_SPEED);
		while (servo_counter > 0) asm("NOP");
	}
	
	if (up_down) {
     6a2:	00 23       	and	r16, r16
     6a4:	f9 f0       	breq	.+62     	; 0x6e4 <_Z17__macro_0001_movehhhhb+0x10c>
		servo[7]+=STEP_ALL; servo[8]+=STEP_ALL; servo[9]+=STEP_ALL; 
     6a6:	e7 e0       	ldi	r30, 0x07	; 7
     6a8:	f2 e0       	ldi	r31, 0x02	; 2
     6aa:	80 91 07 02 	lds	r24, 0x0207
     6ae:	8c 5f       	subi	r24, 0xFC	; 252
     6b0:	80 93 07 02 	sts	0x0207, r24
     6b4:	80 91 08 02 	lds	r24, 0x0208
     6b8:	8c 5f       	subi	r24, 0xFC	; 252
     6ba:	80 93 08 02 	sts	0x0208, r24
     6be:	80 91 09 02 	lds	r24, 0x0209
     6c2:	8c 5f       	subi	r24, 0xFC	; 252
     6c4:	80 93 09 02 	sts	0x0209, r24
		servo[4]-=STEP_ALL; servo[5]-=STEP_ALL; servo[6]-=STEP_ALL;
     6c8:	df 01       	movw	r26, r30
     6ca:	13 97       	sbiw	r26, 0x03	; 3
     6cc:	8c 91       	ld	r24, X
     6ce:	84 50       	subi	r24, 0x04	; 4
     6d0:	8c 93       	st	X, r24
     6d2:	df 01       	movw	r26, r30
     6d4:	12 97       	sbiw	r26, 0x02	; 2
     6d6:	8c 91       	ld	r24, X
     6d8:	84 50       	subi	r24, 0x04	; 4
     6da:	8c 93       	st	X, r24
     6dc:	82 91       	ld	r24, -Z
     6de:	84 50       	subi	r24, 0x04	; 4
     6e0:	80 83       	st	Z, r24
     6e2:	1e c0       	rjmp	.+60     	; 0x720 <_Z17__macro_0001_movehhhhb+0x148>
	} else {
		servo[7]-=STEP_ALL; servo[8]-=STEP_ALL; servo[9]-=STEP_ALL; 
     6e4:	e7 e0       	ldi	r30, 0x07	; 7
     6e6:	f2 e0       	ldi	r31, 0x02	; 2
     6e8:	80 91 07 02 	lds	r24, 0x0207
     6ec:	84 50       	subi	r24, 0x04	; 4
     6ee:	80 93 07 02 	sts	0x0207, r24
     6f2:	80 91 08 02 	lds	r24, 0x0208
     6f6:	84 50       	subi	r24, 0x04	; 4
     6f8:	80 93 08 02 	sts	0x0208, r24
     6fc:	80 91 09 02 	lds	r24, 0x0209
     700:	84 50       	subi	r24, 0x04	; 4
     702:	80 93 09 02 	sts	0x0209, r24
		servo[4]+=STEP_ALL; servo[5]+=STEP_ALL; servo[6]+=STEP_ALL;
     706:	df 01       	movw	r26, r30
     708:	13 97       	sbiw	r26, 0x03	; 3
     70a:	8c 91       	ld	r24, X
     70c:	8c 5f       	subi	r24, 0xFC	; 252
     70e:	8c 93       	st	X, r24
     710:	df 01       	movw	r26, r30
     712:	12 97       	sbiw	r26, 0x02	; 2
     714:	8c 91       	ld	r24, X
     716:	8c 5f       	subi	r24, 0xFC	; 252
     718:	8c 93       	st	X, r24
     71a:	82 91       	ld	r24, -Z
     71c:	8c 5f       	subi	r24, 0xFC	; 252
     71e:	80 83       	st	Z, r24
	}	
	servo_counter = LEGS_WAIT;
     720:	85 e0       	ldi	r24, 0x05	; 5
     722:	80 93 67 02 	sts	0x0267, r24
	while (servo_counter > 0) asm("NOP");
     726:	80 91 67 02 	lds	r24, 0x0267
     72a:	88 23       	and	r24, r24
     72c:	29 f0       	breq	.+10     	; 0x738 <_Z17__macro_0001_movehhhhb+0x160>
     72e:	00 00       	nop
     730:	80 91 67 02 	lds	r24, 0x0267
     734:	88 23       	and	r24, r24
     736:	d9 f7       	brne	.-10     	; 0x72e <_Z17__macro_0001_movehhhhb+0x156>
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <_Z17__macro_0002_moveb>:

void __macro_0002_move(bool up_down = true) {
	if (up_down) {
     740:	88 23       	and	r24, r24
     742:	f9 f0       	breq	.+62     	; 0x782 <_Z17__macro_0002_moveb+0x42>
		servo[7]+=STEP_SIZE; servo[8]+=STEP_SIZE; servo[9]+=STEP_SIZE; 
     744:	e7 e0       	ldi	r30, 0x07	; 7
     746:	f2 e0       	ldi	r31, 0x02	; 2
     748:	80 91 07 02 	lds	r24, 0x0207
     74c:	84 5f       	subi	r24, 0xF4	; 244
     74e:	80 93 07 02 	sts	0x0207, r24
     752:	80 91 08 02 	lds	r24, 0x0208
     756:	84 5f       	subi	r24, 0xF4	; 244
     758:	80 93 08 02 	sts	0x0208, r24
     75c:	80 91 09 02 	lds	r24, 0x0209
     760:	84 5f       	subi	r24, 0xF4	; 244
     762:	80 93 09 02 	sts	0x0209, r24
		servo[4]+=STEP_SIZE; servo[5]+=STEP_SIZE; servo[6]+=STEP_SIZE;
     766:	df 01       	movw	r26, r30
     768:	13 97       	sbiw	r26, 0x03	; 3
     76a:	8c 91       	ld	r24, X
     76c:	84 5f       	subi	r24, 0xF4	; 244
     76e:	8c 93       	st	X, r24
     770:	df 01       	movw	r26, r30
     772:	12 97       	sbiw	r26, 0x02	; 2
     774:	8c 91       	ld	r24, X
     776:	84 5f       	subi	r24, 0xF4	; 244
     778:	8c 93       	st	X, r24
     77a:	82 91       	ld	r24, -Z
     77c:	84 5f       	subi	r24, 0xF4	; 244
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret
	} else {
		servo[7]-=STEP_SIZE; servo[8]-=STEP_SIZE; servo[9]-=STEP_SIZE; 
     782:	e7 e0       	ldi	r30, 0x07	; 7
     784:	f2 e0       	ldi	r31, 0x02	; 2
     786:	80 91 07 02 	lds	r24, 0x0207
     78a:	8c 50       	subi	r24, 0x0C	; 12
     78c:	80 93 07 02 	sts	0x0207, r24
     790:	80 91 08 02 	lds	r24, 0x0208
     794:	8c 50       	subi	r24, 0x0C	; 12
     796:	80 93 08 02 	sts	0x0208, r24
     79a:	80 91 09 02 	lds	r24, 0x0209
     79e:	8c 50       	subi	r24, 0x0C	; 12
     7a0:	80 93 09 02 	sts	0x0209, r24
		servo[4]-=STEP_SIZE; servo[5]-=STEP_SIZE; servo[6]-=STEP_SIZE;
     7a4:	df 01       	movw	r26, r30
     7a6:	13 97       	sbiw	r26, 0x03	; 3
     7a8:	8c 91       	ld	r24, X
     7aa:	8c 50       	subi	r24, 0x0C	; 12
     7ac:	8c 93       	st	X, r24
     7ae:	df 01       	movw	r26, r30
     7b0:	12 97       	sbiw	r26, 0x02	; 2
     7b2:	8c 91       	ld	r24, X
     7b4:	8c 50       	subi	r24, 0x0C	; 12
     7b6:	8c 93       	st	X, r24
     7b8:	82 91       	ld	r24, -Z
     7ba:	8c 50       	subi	r24, 0x0C	; 12
     7bc:	80 83       	st	Z, r24
     7be:	08 95       	ret

000007c0 <_Z17__macro_0003_movehhhhb>:
	}		
}

void __macro_0003_move(unsigned char a1, unsigned char a2, unsigned char b1, unsigned char b2, bool up_down = true) {
     7c0:	0f 93       	push	r16
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
	unsigned char i = 0;
	servo[a1] += LEG_UP_DOWN_HEIGHT;
     7c6:	a8 2f       	mov	r26, r24
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e0 e0       	ldi	r30, 0x00	; 0
     7cc:	f2 e0       	ldi	r31, 0x02	; 2
     7ce:	ef 01       	movw	r28, r30
     7d0:	ca 0f       	add	r28, r26
     7d2:	db 1f       	adc	r29, r27
     7d4:	88 81       	ld	r24, Y
     7d6:	82 5f       	subi	r24, 0xF2	; 242
     7d8:	88 83       	st	Y, r24
	servo[a2] -= LEG_UP_DOWN_HEIGHT;
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	e6 0f       	add	r30, r22
     7de:	f7 1f       	adc	r31, r23
     7e0:	80 81       	ld	r24, Z
     7e2:	8e 50       	subi	r24, 0x0E	; 14
     7e4:	80 83       	st	Z, r24
	servo_counter = LEG_UP_WAIT;
     7e6:	8c e0       	ldi	r24, 0x0C	; 12
     7e8:	80 93 67 02 	sts	0x0267, r24
	while (servo_counter > 0) asm("NOP");
     7ec:	80 91 67 02 	lds	r24, 0x0267
     7f0:	88 23       	and	r24, r24
     7f2:	29 f0       	breq	.+10     	; 0x7fe <_Z17__macro_0003_movehhhhb+0x3e>
     7f4:	00 00       	nop
     7f6:	80 91 67 02 	lds	r24, 0x0267
     7fa:	88 23       	and	r24, r24
     7fc:	d9 f7       	brne	.-10     	; 0x7f4 <_Z17__macro_0003_movehhhhb+0x34>
	
	if (up_down) {
     7fe:	00 23       	and	r16, r16
     800:	71 f0       	breq	.+28     	; 0x81e <_Z17__macro_0003_movehhhhb+0x5e>
		servo[b1] -= STEP_SIZE;
     802:	e0 e0       	ldi	r30, 0x00	; 0
     804:	f2 e0       	ldi	r31, 0x02	; 2
     806:	ef 01       	movw	r28, r30
     808:	c4 0f       	add	r28, r20
     80a:	d1 1d       	adc	r29, r1
     80c:	88 81       	ld	r24, Y
     80e:	8c 50       	subi	r24, 0x0C	; 12
     810:	88 83       	st	Y, r24
		servo[b2] -= STEP_SIZE;
     812:	e2 0f       	add	r30, r18
     814:	f1 1d       	adc	r31, r1
     816:	80 81       	ld	r24, Z
     818:	8c 50       	subi	r24, 0x0C	; 12
     81a:	80 83       	st	Z, r24
     81c:	0d c0       	rjmp	.+26     	; 0x838 <_Z17__macro_0003_movehhhhb+0x78>
	} else {
		servo[b1] += STEP_SIZE;
     81e:	e0 e0       	ldi	r30, 0x00	; 0
     820:	f2 e0       	ldi	r31, 0x02	; 2
     822:	ef 01       	movw	r28, r30
     824:	c4 0f       	add	r28, r20
     826:	d1 1d       	adc	r29, r1
     828:	88 81       	ld	r24, Y
     82a:	84 5f       	subi	r24, 0xF4	; 244
     82c:	88 83       	st	Y, r24
		servo[b2] += STEP_SIZE;
     82e:	e2 0f       	add	r30, r18
     830:	f1 1d       	adc	r31, r1
     832:	80 81       	ld	r24, Z
     834:	84 5f       	subi	r24, 0xF4	; 244
     836:	80 83       	st	Z, r24
	}
	servo_counter = LEG_MOVE_WAIT;
     838:	86 e4       	ldi	r24, 0x46	; 70
     83a:	80 93 67 02 	sts	0x0267, r24
	while (servo_counter > 0) asm("NOP");
     83e:	80 91 67 02 	lds	r24, 0x0267
     842:	88 23       	and	r24, r24
     844:	39 f0       	breq	.+14     	; 0x854 <_Z17__macro_0003_movehhhhb+0x94>
     846:	00 00       	nop
     848:	80 91 67 02 	lds	r24, 0x0267
     84c:	88 23       	and	r24, r24
     84e:	d9 f7       	brne	.-10     	; 0x846 <_Z17__macro_0003_movehhhhb+0x86>
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	01 c0       	rjmp	.+2      	; 0x856 <_Z17__macro_0003_movehhhhb+0x96>
     854:	90 e0       	ldi	r25, 0x00	; 0

	for (i=0; i<LEG_UP_DOWN_HEIGHT; i++) {
		servo[a1]--;
     856:	e0 e0       	ldi	r30, 0x00	; 0
     858:	f2 e0       	ldi	r31, 0x02	; 2
     85a:	ae 0f       	add	r26, r30
     85c:	bf 1f       	adc	r27, r31
		servo[a2]++;
     85e:	e6 0f       	add	r30, r22
     860:	f7 1f       	adc	r31, r23
	}
	servo_counter = LEG_MOVE_WAIT;
	while (servo_counter > 0) asm("NOP");

	for (i=0; i<LEG_UP_DOWN_HEIGHT; i++) {
		servo[a1]--;
     862:	8c 91       	ld	r24, X
     864:	81 50       	subi	r24, 0x01	; 1
     866:	8c 93       	st	X, r24
		servo[a2]++;
     868:	80 81       	ld	r24, Z
     86a:	8f 5f       	subi	r24, 0xFF	; 255
     86c:	80 83       	st	Z, r24
		servo_counter = (i*LEG_DOWN_SPEED);
     86e:	90 93 67 02 	sts	0x0267, r25
		while (servo_counter > 0) asm("NOP");
     872:	80 91 67 02 	lds	r24, 0x0267
     876:	88 23       	and	r24, r24
     878:	29 f0       	breq	.+10     	; 0x884 <_Z17__macro_0003_movehhhhb+0xc4>
     87a:	00 00       	nop
     87c:	80 91 67 02 	lds	r24, 0x0267
     880:	88 23       	and	r24, r24
     882:	d9 f7       	brne	.-10     	; 0x87a <_Z17__macro_0003_movehhhhb+0xba>
		servo[b2] += STEP_SIZE;
	}
	servo_counter = LEG_MOVE_WAIT;
	while (servo_counter > 0) asm("NOP");

	for (i=0; i<LEG_UP_DOWN_HEIGHT; i++) {
     884:	9f 5f       	subi	r25, 0xFF	; 255
     886:	9e 30       	cpi	r25, 0x0E	; 14
     888:	61 f7       	brne	.-40     	; 0x862 <_Z17__macro_0003_movehhhhb+0xa2>
		servo[a1]--;
		servo[a2]++;
		servo_counter = (i*LEG_DOWN_SPEED);
		while (servo_counter > 0) asm("NOP");
	}
}	
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	0f 91       	pop	r16
     890:	08 95       	ret

00000892 <__vector_21>:

ISR(TIMER0_COMPA_vect) {
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	0b b6       	in	r0, 0x3b	; 59
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	8f 93       	push	r24
     8a2:	9f 93       	push	r25
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
	if (servo_cnt8_2 == 0) {
     8a8:	80 91 66 02 	lds	r24, 0x0266
     8ac:	88 23       	and	r24, r24
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <__vector_21+0x20>
     8b0:	75 c0       	rjmp	.+234    	; 0x99c <__vector_21+0x10a>
		if (servo_cnt8_1 < servo[0])  asm("SBI 0x0E,3"); else asm("CBI 0x0E,3");
     8b2:	90 91 00 02 	lds	r25, 0x0200
     8b6:	80 91 65 02 	lds	r24, 0x0265
     8ba:	89 17       	cp	r24, r25
     8bc:	10 f4       	brcc	.+4      	; 0x8c2 <__vector_21+0x30>
     8be:	73 9a       	sbi	0x0e, 3	; 14
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <__vector_21+0x32>
     8c2:	73 98       	cbi	0x0e, 3	; 14
		if (servo_cnt8_1 < servo[1])  asm("SBI 0x05,7"); else asm("CBI 0x05,7");
     8c4:	90 91 01 02 	lds	r25, 0x0201
     8c8:	80 91 65 02 	lds	r24, 0x0265
     8cc:	89 17       	cp	r24, r25
     8ce:	10 f4       	brcc	.+4      	; 0x8d4 <__vector_21+0x42>
     8d0:	2f 9a       	sbi	0x05, 7	; 5
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <__vector_21+0x44>
     8d4:	2f 98       	cbi	0x05, 7	; 5
		if (servo_cnt8_1 < servo[2])  asm("SBI 0x05,6"); else asm("CBI 0x05,6");
     8d6:	90 91 02 02 	lds	r25, 0x0202
     8da:	80 91 65 02 	lds	r24, 0x0265
     8de:	89 17       	cp	r24, r25
     8e0:	10 f4       	brcc	.+4      	; 0x8e6 <__vector_21+0x54>
     8e2:	2e 9a       	sbi	0x05, 6	; 5
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <__vector_21+0x56>
     8e6:	2e 98       	cbi	0x05, 6	; 5
		if (servo_cnt8_1 < servo[3])  asm("SBI 0x05,5"); else asm("CBI 0x05,5");
     8e8:	90 91 03 02 	lds	r25, 0x0203
     8ec:	80 91 65 02 	lds	r24, 0x0265
     8f0:	89 17       	cp	r24, r25
     8f2:	10 f4       	brcc	.+4      	; 0x8f8 <__vector_21+0x66>
     8f4:	2d 9a       	sbi	0x05, 5	; 5
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <__vector_21+0x68>
     8f8:	2d 98       	cbi	0x05, 5	; 5
		if (servo_cnt8_1 < servo[4])  asm("SBI 0x05,4"); else asm("CBI 0x05,4");
     8fa:	90 91 04 02 	lds	r25, 0x0204
     8fe:	80 91 65 02 	lds	r24, 0x0265
     902:	89 17       	cp	r24, r25
     904:	10 f4       	brcc	.+4      	; 0x90a <__vector_21+0x78>
     906:	2c 9a       	sbi	0x05, 4	; 5
     908:	01 c0       	rjmp	.+2      	; 0x90c <__vector_21+0x7a>
     90a:	2c 98       	cbi	0x05, 4	; 5
		if (servo_cnt8_1 < servo[5])  asm("SBI 0x11,0"); else asm("CBI 0x11,0");
     90c:	90 91 05 02 	lds	r25, 0x0205
     910:	80 91 65 02 	lds	r24, 0x0265
     914:	89 17       	cp	r24, r25
     916:	10 f4       	brcc	.+4      	; 0x91c <__vector_21+0x8a>
     918:	88 9a       	sbi	0x11, 0	; 17
     91a:	01 c0       	rjmp	.+2      	; 0x91e <__vector_21+0x8c>
     91c:	88 98       	cbi	0x11, 0	; 17
		if (servo_cnt8_1 < servo[6])  asm("SBI 0x11,1"); else asm("CBI 0x11,1");
     91e:	90 91 06 02 	lds	r25, 0x0206
     922:	80 91 65 02 	lds	r24, 0x0265
     926:	89 17       	cp	r24, r25
     928:	10 f4       	brcc	.+4      	; 0x92e <__vector_21+0x9c>
     92a:	89 9a       	sbi	0x11, 1	; 17
     92c:	01 c0       	rjmp	.+2      	; 0x930 <__vector_21+0x9e>
     92e:	89 98       	cbi	0x11, 1	; 17
		if (servo_cnt8_1 < servo[7])  asm("SBI 0x11,2"); else asm("CBI 0x11,2");
     930:	90 91 07 02 	lds	r25, 0x0207
     934:	80 91 65 02 	lds	r24, 0x0265
     938:	89 17       	cp	r24, r25
     93a:	10 f4       	brcc	.+4      	; 0x940 <__vector_21+0xae>
     93c:	8a 9a       	sbi	0x11, 2	; 17
     93e:	01 c0       	rjmp	.+2      	; 0x942 <__vector_21+0xb0>
     940:	8a 98       	cbi	0x11, 2	; 17
		if (servo_cnt8_1 < servo[8])  asm("SBI 0x11,3"); else asm("CBI 0x11,3");
     942:	90 91 08 02 	lds	r25, 0x0208
     946:	80 91 65 02 	lds	r24, 0x0265
     94a:	89 17       	cp	r24, r25
     94c:	10 f4       	brcc	.+4      	; 0x952 <__vector_21+0xc0>
     94e:	8b 9a       	sbi	0x11, 3	; 17
     950:	01 c0       	rjmp	.+2      	; 0x954 <__vector_21+0xc2>
     952:	8b 98       	cbi	0x11, 3	; 17
		if (servo_cnt8_1 < servo[9])  asm("SBI 0x11,4"); else asm("CBI 0x11,4");
     954:	90 91 09 02 	lds	r25, 0x0209
     958:	80 91 65 02 	lds	r24, 0x0265
     95c:	89 17       	cp	r24, r25
     95e:	10 f4       	brcc	.+4      	; 0x964 <__vector_21+0xd2>
     960:	8c 9a       	sbi	0x11, 4	; 17
     962:	01 c0       	rjmp	.+2      	; 0x966 <__vector_21+0xd4>
     964:	8c 98       	cbi	0x11, 4	; 17
		if (servo_cnt8_1 < servo[10]) asm("SBI 0x11,5"); else asm("CBI 0x11,5");
     966:	90 91 0a 02 	lds	r25, 0x020A
     96a:	80 91 65 02 	lds	r24, 0x0265
     96e:	89 17       	cp	r24, r25
     970:	10 f4       	brcc	.+4      	; 0x976 <__vector_21+0xe4>
     972:	8d 9a       	sbi	0x11, 5	; 17
     974:	01 c0       	rjmp	.+2      	; 0x978 <__vector_21+0xe6>
     976:	8d 98       	cbi	0x11, 5	; 17
		if (servo_cnt8_1 < servo[11]) asm("SBI 0x11,6"); else asm("CBI 0x11,6");
     978:	90 91 0b 02 	lds	r25, 0x020B
     97c:	80 91 65 02 	lds	r24, 0x0265
     980:	89 17       	cp	r24, r25
     982:	10 f4       	brcc	.+4      	; 0x988 <__vector_21+0xf6>
     984:	8e 9a       	sbi	0x11, 6	; 17
     986:	01 c0       	rjmp	.+2      	; 0x98a <__vector_21+0xf8>
     988:	8e 98       	cbi	0x11, 6	; 17
		if (servo_cnt8_1 < servo[12]) asm("SBI 0x11,7"); else asm("CBI 0x11,7");
     98a:	90 91 0c 02 	lds	r25, 0x020C
     98e:	80 91 65 02 	lds	r24, 0x0265
     992:	89 17       	cp	r24, r25
     994:	10 f4       	brcc	.+4      	; 0x99a <__vector_21+0x108>
     996:	8f 9a       	sbi	0x11, 7	; 17
     998:	01 c0       	rjmp	.+2      	; 0x99c <__vector_21+0x10a>
     99a:	8f 98       	cbi	0x11, 7	; 17
	}
	
	if ((servo_cnt8_1 == 0) && (servo_counter > 0)) servo_counter--;
     99c:	80 91 65 02 	lds	r24, 0x0265
     9a0:	88 23       	and	r24, r24
     9a2:	49 f4       	brne	.+18     	; 0x9b6 <__vector_21+0x124>
     9a4:	80 91 67 02 	lds	r24, 0x0267
     9a8:	88 23       	and	r24, r24
     9aa:	29 f0       	breq	.+10     	; 0x9b6 <__vector_21+0x124>
     9ac:	80 91 67 02 	lds	r24, 0x0267
     9b0:	81 50       	subi	r24, 0x01	; 1
     9b2:	80 93 67 02 	sts	0x0267, r24
	
	servo_cnt8_1++;
     9b6:	80 91 65 02 	lds	r24, 0x0265
     9ba:	8f 5f       	subi	r24, 0xFF	; 255
     9bc:	80 93 65 02 	sts	0x0265, r24
	if (servo_cnt8_1 >= 95) {
     9c0:	80 91 65 02 	lds	r24, 0x0265
     9c4:	8f 35       	cpi	r24, 0x5F	; 95
     9c6:	78 f1       	brcs	.+94     	; 0xa26 <__vector_21+0x194>
		servo_cnt8_1 = 0;
     9c8:	10 92 65 02 	sts	0x0265, r1
		servo_cnt8_2++;
     9cc:	80 91 66 02 	lds	r24, 0x0266
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	80 93 66 02 	sts	0x0266, r24
		if (servo_cnt8_2 >= 10) {
     9d6:	80 91 66 02 	lds	r24, 0x0266
     9da:	8a 30       	cpi	r24, 0x0A	; 10
     9dc:	20 f1       	brcs	.+72     	; 0xa26 <__vector_21+0x194>
			servo_cnt8_2 = 0;
     9de:	10 92 66 02 	sts	0x0266, r1
			ir1[ir_counter] = (IR_1_PORT & IR_1) ? 1 : 0;
     9e2:	e0 91 68 02 	lds	r30, 0x0268
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	90 91 00 01 	lds	r25, 0x0100
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	96 ff       	sbrs	r25, 6
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e3 5f       	subi	r30, 0xF3	; 243
     9f4:	fd 4f       	sbci	r31, 0xFD	; 253
     9f6:	80 83       	st	Z, r24
			ir2[ir_counter] = (IR_2_PORT & IR_2) ? 1 : 0;
     9f8:	90 91 68 02 	lds	r25, 0x0268
     9fc:	80 91 06 01 	lds	r24, 0x0106
     a00:	88 1f       	adc	r24, r24
     a02:	88 27       	eor	r24, r24
     a04:	88 1f       	adc	r24, r24
     a06:	e1 e2       	ldi	r30, 0x21	; 33
     a08:	f2 e0       	ldi	r31, 0x02	; 2
     a0a:	e9 0f       	add	r30, r25
     a0c:	f1 1d       	adc	r31, r1
     a0e:	80 83       	st	Z, r24
			ir_counter++;
     a10:	80 91 68 02 	lds	r24, 0x0268
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	80 93 68 02 	sts	0x0268, r24
			if (ir_counter > IR_MAX_ARRAY) ir_counter = 0;
     a1a:	80 91 68 02 	lds	r24, 0x0268
     a1e:	85 31       	cpi	r24, 0x15	; 21
     a20:	10 f0       	brcs	.+4      	; 0xa26 <__vector_21+0x194>
     a22:	10 92 68 02 	sts	0x0268, r1
		}
	}		
	TCNT0 = 0;
     a26:	16 bc       	out	0x26, r1	; 38
}
     a28:	ff 91       	pop	r31
     a2a:	ef 91       	pop	r30
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <_Z10servo_initv>:

void servo_init(void) {
	TCCR0A = 0;
     a3e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A);
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	80 93 6e 00 	sts	0x006E, r24
	OCR0A  = 5;
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	87 bd       	out	0x27, r24	; 39
	DDRE |= (1 << PINE3);
     a4e:	6b 9a       	sbi	0x0d, 3	; 13
	DDRB |= (1 << PINB7) | (1 << PINB6) | (1 << PINB5) | (1 << PINB4);
     a50:	84 b1       	in	r24, 0x04	; 4
     a52:	80 6f       	ori	r24, 0xF0	; 240
     a54:	84 b9       	out	0x04, r24	; 4
	DDRF |= 0xFF; 
     a56:	80 b3       	in	r24, 0x10	; 16
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	80 bb       	out	0x10, r24	; 16
}
     a5c:	08 95       	ret

00000a5e <_Z7go_nextv>:

void go_next(void) {
     a5e:	0f 93       	push	r16
	__macro_0001_move(12, 1, 9, 5, true);
     a60:	8c e0       	ldi	r24, 0x0C	; 12
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	49 e0       	ldi	r20, 0x09	; 9
     a66:	25 e0       	ldi	r18, 0x05	; 5
     a68:	01 e0       	ldi	r16, 0x01	; 1
     a6a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z17__macro_0001_movehhhhb>
	__macro_0001_move(10, 3, 7, 4, true);
     a6e:	8a e0       	ldi	r24, 0x0A	; 10
     a70:	63 e0       	ldi	r22, 0x03	; 3
     a72:	47 e0       	ldi	r20, 0x07	; 7
     a74:	24 e0       	ldi	r18, 0x04	; 4
     a76:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z17__macro_0001_movehhhhb>
	__macro_0001_move(11, 2, 8, 6, true);
     a7a:	8b e0       	ldi	r24, 0x0B	; 11
     a7c:	62 e0       	ldi	r22, 0x02	; 2
     a7e:	48 e0       	ldi	r20, 0x08	; 8
     a80:	26 e0       	ldi	r18, 0x06	; 6
     a82:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z17__macro_0001_movehhhhb>
	return;
}
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <_Z7go_backv>:

void go_back(void) {
     a8a:	0f 93       	push	r16
	__macro_0001_move(12, 1, 9, 5, false);
     a8c:	8c e0       	ldi	r24, 0x0C	; 12
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	49 e0       	ldi	r20, 0x09	; 9
     a92:	25 e0       	ldi	r18, 0x05	; 5
     a94:	00 e0       	ldi	r16, 0x00	; 0
     a96:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z17__macro_0001_movehhhhb>
	__macro_0001_move(10, 3, 7, 4, false);
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	63 e0       	ldi	r22, 0x03	; 3
     a9e:	47 e0       	ldi	r20, 0x07	; 7
     aa0:	24 e0       	ldi	r18, 0x04	; 4
     aa2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z17__macro_0001_movehhhhb>
	__macro_0001_move(11, 2, 8, 6, false);
     aa6:	8b e0       	ldi	r24, 0x0B	; 11
     aa8:	62 e0       	ldi	r22, 0x02	; 2
     aaa:	48 e0       	ldi	r20, 0x08	; 8
     aac:	26 e0       	ldi	r18, 0x06	; 6
     aae:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z17__macro_0001_movehhhhb>
	return;
}
     ab2:	0f 91       	pop	r16
     ab4:	08 95       	ret

00000ab6 <_Z12rotate_rightv>:

void rotate_right(void) {
     ab6:	0f 93       	push	r16
	__macro_0002_move(true);
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	0e 94 a0 03 	call	0x740	; 0x740 <_Z17__macro_0002_moveb>
	__macro_0003_move(12, 1, 9, 5, true);
     abe:	8c e0       	ldi	r24, 0x0C	; 12
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	49 e0       	ldi	r20, 0x09	; 9
     ac4:	25 e0       	ldi	r18, 0x05	; 5
     ac6:	01 e0       	ldi	r16, 0x01	; 1
     ac8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z17__macro_0003_movehhhhb>
	__macro_0003_move(10, 3, 7, 4, true);
     acc:	8a e0       	ldi	r24, 0x0A	; 10
     ace:	63 e0       	ldi	r22, 0x03	; 3
     ad0:	47 e0       	ldi	r20, 0x07	; 7
     ad2:	24 e0       	ldi	r18, 0x04	; 4
     ad4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z17__macro_0003_movehhhhb>
	__macro_0003_move(11, 2, 8, 6, true);
     ad8:	8b e0       	ldi	r24, 0x0B	; 11
     ada:	62 e0       	ldi	r22, 0x02	; 2
     adc:	48 e0       	ldi	r20, 0x08	; 8
     ade:	26 e0       	ldi	r18, 0x06	; 6
     ae0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z17__macro_0003_movehhhhb>
	return;
}
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <_Z11rotate_leftv>:

void rotate_left(void) {
     ae8:	0f 93       	push	r16
	__macro_0002_move(false);
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 a0 03 	call	0x740	; 0x740 <_Z17__macro_0002_moveb>
	__macro_0003_move(12, 1, 9, 5, false);
     af0:	8c e0       	ldi	r24, 0x0C	; 12
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	49 e0       	ldi	r20, 0x09	; 9
     af6:	25 e0       	ldi	r18, 0x05	; 5
     af8:	00 e0       	ldi	r16, 0x00	; 0
     afa:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z17__macro_0003_movehhhhb>
	__macro_0003_move(10, 3, 7, 4, false);
     afe:	8a e0       	ldi	r24, 0x0A	; 10
     b00:	63 e0       	ldi	r22, 0x03	; 3
     b02:	47 e0       	ldi	r20, 0x07	; 7
     b04:	24 e0       	ldi	r18, 0x04	; 4
     b06:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z17__macro_0003_movehhhhb>
	__macro_0003_move(11, 2, 8, 6, false);
     b0a:	8b e0       	ldi	r24, 0x0B	; 11
     b0c:	62 e0       	ldi	r22, 0x02	; 2
     b0e:	48 e0       	ldi	r20, 0x08	; 8
     b10:	26 e0       	ldi	r18, 0x06	; 6
     b12:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z17__macro_0003_movehhhhb>
	return;
}
     b16:	0f 91       	pop	r16
     b18:	08 95       	ret

00000b1a <_Z9servo_setmm>:

void servo_set(unsigned long a, unsigned long b) {
	servo[a] = (unsigned char)b;
     b1a:	60 50       	subi	r22, 0x00	; 0
     b1c:	7e 4f       	sbci	r23, 0xFE	; 254
     b1e:	fb 01       	movw	r30, r22
     b20:	20 83       	st	Z, r18
	return;
}
     b22:	08 95       	ret

00000b24 <_Z7ir_initv>:

void ir_init(void) {
	DDRH &= ~(1 << 6);
     b24:	e1 e0       	ldi	r30, 0x01	; 1
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	80 81       	ld	r24, Z
     b2a:	8f 7b       	andi	r24, 0xBF	; 191
     b2c:	80 83       	st	Z, r24
	DDRK &= ~(1 << 7);
     b2e:	e7 e0       	ldi	r30, 0x07	; 7
     b30:	f1 e0       	ldi	r31, 0x01	; 1
     b32:	80 81       	ld	r24, Z
     b34:	8f 77       	andi	r24, 0x7F	; 127
     b36:	80 83       	st	Z, r24
	PORTH |= (1 << 6);
     b38:	e2 e0       	ldi	r30, 0x02	; 2
     b3a:	f1 e0       	ldi	r31, 0x01	; 1
     b3c:	80 81       	ld	r24, Z
     b3e:	80 64       	ori	r24, 0x40	; 64
     b40:	80 83       	st	Z, r24
	PORTK |= (1 << 7);
     b42:	e8 e0       	ldi	r30, 0x08	; 8
     b44:	f1 e0       	ldi	r31, 0x01	; 1
     b46:	80 81       	ld	r24, Z
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	80 83       	st	Z, r24
}
     b4c:	08 95       	ret

00000b4e <_Z13ir_read_rightv>:

bool ir_read_right(void) {
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char i = 0;
	unsigned char irx_counter = 0;
     b52:	50 e0       	ldi	r21, 0x00	; 0
	for (i=0; i<IR_MAX_ARRAY; i++) {
		if (ir1[i] == 0) irx_counter++;
     b54:	2d e0       	ldi	r18, 0x0D	; 13
     b56:	32 e0       	ldi	r19, 0x02	; 2
     b58:	f9 01       	movw	r30, r18
     b5a:	e8 0f       	add	r30, r24
     b5c:	f9 1f       	adc	r31, r25
     b5e:	40 81       	ld	r20, Z
     b60:	44 23       	and	r20, r20
     b62:	09 f4       	brne	.+2      	; 0xb66 <_Z13ir_read_rightv+0x18>
     b64:	5f 5f       	subi	r21, 0xFF	; 255
     b66:	01 96       	adiw	r24, 0x01	; 1
}

bool ir_read_right(void) {
	unsigned char i = 0;
	unsigned char irx_counter = 0;
	for (i=0; i<IR_MAX_ARRAY; i++) {
     b68:	84 31       	cpi	r24, 0x14	; 20
     b6a:	91 05       	cpc	r25, r1
     b6c:	a9 f7       	brne	.-22     	; 0xb58 <_Z13ir_read_rightv+0xa>
	DDRK &= ~(1 << 7);
	PORTH |= (1 << 6);
	PORTK |= (1 << 7);
}

bool ir_read_right(void) {
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	52 31       	cpi	r21, 0x12	; 18
     b72:	08 f4       	brcc	.+2      	; 0xb76 <_Z13ir_read_rightv+0x28>
     b74:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char irx_counter = 0;
	for (i=0; i<IR_MAX_ARRAY; i++) {
		if (ir1[i] == 0) irx_counter++;
	}
	if (irx_counter > (IR_MAX_ARRAY - 3)) return true; else return false;
}
     b76:	08 95       	ret

00000b78 <_Z12ir_read_leftv>:

bool ir_read_left(void) {
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char i = 0;
	unsigned char irx_counter = 0;
     b7c:	50 e0       	ldi	r21, 0x00	; 0
	for (i=0; i<IR_MAX_ARRAY; i++) {
		if (ir2[i] == 0) irx_counter++;
     b7e:	21 e2       	ldi	r18, 0x21	; 33
     b80:	32 e0       	ldi	r19, 0x02	; 2
     b82:	f9 01       	movw	r30, r18
     b84:	e8 0f       	add	r30, r24
     b86:	f9 1f       	adc	r31, r25
     b88:	40 81       	ld	r20, Z
     b8a:	44 23       	and	r20, r20
     b8c:	09 f4       	brne	.+2      	; 0xb90 <_Z12ir_read_leftv+0x18>
     b8e:	5f 5f       	subi	r21, 0xFF	; 255
     b90:	01 96       	adiw	r24, 0x01	; 1
}

bool ir_read_left(void) {
	unsigned char i = 0;
	unsigned char irx_counter = 0;
	for (i=0; i<IR_MAX_ARRAY; i++) {
     b92:	84 31       	cpi	r24, 0x14	; 20
     b94:	91 05       	cpc	r25, r1
     b96:	a9 f7       	brne	.-22     	; 0xb82 <_Z12ir_read_leftv+0xa>
		if (ir1[i] == 0) irx_counter++;
	}
	if (irx_counter > (IR_MAX_ARRAY - 3)) return true; else return false;
}

bool ir_read_left(void) {
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	52 31       	cpi	r21, 0x12	; 18
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <_Z12ir_read_leftv+0x28>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char irx_counter = 0;
	for (i=0; i<IR_MAX_ARRAY; i++) {
		if (ir2[i] == 0) irx_counter++;
	}
	if (irx_counter > (IR_MAX_ARRAY - 3)) return true; else return false;
     ba0:	08 95       	ret

00000ba2 <_Z25__bluetooth_rs232_putcharcP6__file>:
	UBRR3 = 103;
	UCSR3B = (1 << RXEN3) | (1 << TXEN3) | (1 << RXCIE3);
    bluetooth_init_status = true;
}

int __bluetooth_rs232_putchar(char c, FILE *stream) {
     ba2:	1f 93       	push	r17
     ba4:	18 2f       	mov	r17, r24
	if (bluetooth_init_status == false) return 0;
     ba6:	80 91 69 02 	lds	r24, 0x0269
     baa:	88 23       	and	r24, r24
     bac:	61 f0       	breq	.+24     	; 0xbc6 <_Z25__bluetooth_rs232_putcharcP6__file+0x24>
	if (c == 13) __bluetooth_rs232_putchar(10, stream);
     bae:	1d 30       	cpi	r17, 0x0D	; 13
     bb0:	19 f4       	brne	.+6      	; 0xbb8 <_Z25__bluetooth_rs232_putcharcP6__file+0x16>
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	0e 94 d1 05 	call	0xba2	; 0xba2 <_Z25__bluetooth_rs232_putcharcP6__file>
	while (!( UCSR3A & (1 << UDRE3) ));
     bb8:	e0 e3       	ldi	r30, 0x30	; 48
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	80 81       	ld	r24, Z
     bbe:	85 ff       	sbrs	r24, 5
     bc0:	fd cf       	rjmp	.-6      	; 0xbbc <_Z25__bluetooth_rs232_putcharcP6__file+0x1a>
	UDR3 = c;
     bc2:	10 93 36 01 	sts	0x0136, r17
	return 0;
}
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	1f 91       	pop	r17
     bcc:	08 95       	ret

00000bce <_Z22__bluetooth_rs232_initv>:
char			bluetooth_in_buffer[BLUETOOTH_IN_BUFFER_LEN];

unsigned long	servo_current								= 0;

/* Bluetooth (RX3/TX3) section */
void __bluetooth_rs232_init(void) {
     bce:	ed e6       	ldi	r30, 0x6D	; 109
     bd0:	f2 e0       	ldi	r31, 0x02	; 2
     bd2:	cf 01       	movw	r24, r30
     bd4:	80 96       	adiw	r24, 0x20	; 32
	unsigned char i;
	for (i=0; i<BLUETOOTH_IN_BUFFER_LEN; i++) bluetooth_in_buffer[i] = 0;
     bd6:	11 92       	st	Z+, r1
     bd8:	e8 17       	cp	r30, r24
     bda:	f9 07       	cpc	r31, r25
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <_Z22__bluetooth_rs232_initv+0x8>
	BLUETOOTH_RX_DDR  &= ~(1 << BLUETOOTH_RX_PIN); 
     bde:	a4 e0       	ldi	r26, 0x04	; 4
     be0:	b1 e0       	ldi	r27, 0x01	; 1
     be2:	8c 91       	ld	r24, X
     be4:	8e 7f       	andi	r24, 0xFE	; 254
     be6:	8c 93       	st	X, r24
	BLUETOOTH_RX_PORT |=  (1 << BLUETOOTH_RX_PIN);
     be8:	e5 e0       	ldi	r30, 0x05	; 5
     bea:	f1 e0       	ldi	r31, 0x01	; 1
     bec:	80 81       	ld	r24, Z
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 83       	st	Z, r24
	BLUETOOTH_TX_DDR  |=  (1 << BLUETOOTH_TX_PIN); 
     bf2:	8c 91       	ld	r24, X
     bf4:	82 60       	ori	r24, 0x02	; 2
     bf6:	8c 93       	st	X, r24
	BLUETOOTH_TX_PORT |=  (1 << BLUETOOTH_TX_PIN);
     bf8:	80 81       	ld	r24, Z
     bfa:	82 60       	ori	r24, 0x02	; 2
     bfc:	80 83       	st	Z, r24
	UBRR3 = 103;
     bfe:	87 e6       	ldi	r24, 0x67	; 103
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	90 93 35 01 	sts	0x0135, r25
     c06:	80 93 34 01 	sts	0x0134, r24
	UCSR3B = (1 << RXEN3) | (1 << TXEN3) | (1 << RXCIE3);
     c0a:	88 e9       	ldi	r24, 0x98	; 152
     c0c:	80 93 31 01 	sts	0x0131, r24
    bluetooth_init_status = true;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	80 93 69 02 	sts	0x0269, r24
}
     c16:	08 95       	ret

00000c18 <_Z33__bluetooth_rs232_clear_in_bufferv>:
	while (!( UCSR3A & (1 << UDRE3) ));
	UDR3 = c;
	return 0;
}

void __bluetooth_rs232_clear_in_buffer(void) {
     c18:	ed e6       	ldi	r30, 0x6D	; 109
     c1a:	f2 e0       	ldi	r31, 0x02	; 2
     c1c:	cf 01       	movw	r24, r30
     c1e:	80 96       	adiw	r24, 0x20	; 32
	unsigned char i;
	for (i=0; i<BLUETOOTH_IN_BUFFER_LEN; i++) bluetooth_in_buffer[i] = 0;
     c20:	11 92       	st	Z+, r1
     c22:	e8 17       	cp	r30, r24
     c24:	f9 07       	cpc	r31, r25
     c26:	e1 f7       	brne	.-8      	; 0xc20 <_Z33__bluetooth_rs232_clear_in_bufferv+0x8>
	bluetooth_in_buffer_counter = 0;
     c28:	10 92 6c 02 	sts	0x026C, r1
	bluetooth_in_buffer_ovf = false;
     c2c:	10 92 6b 02 	sts	0x026B, r1
}
     c30:	08 95       	ret

00000c32 <_Z28__bluetooth_rs232_get_bufferv>:

char* __bluetooth_rs232_get_buffer(void) {
	return bluetooth_in_buffer;
}
     c32:	8d e6       	ldi	r24, 0x6D	; 109
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	08 95       	ret

00000c38 <_Z21__bluetooth_rs232_ibov>:

bool __bluetooth_rs232_ibo(void) {
	return bluetooth_in_buffer_ovf;
}
     c38:	80 91 6b 02 	lds	r24, 0x026B
     c3c:	08 95       	ret

00000c3e <_Z20__bluetooth_rs232_ncv>:

bool __bluetooth_rs232_nc(void) {
	bool a = bluetooth_nchr_status;
     c3e:	80 91 6a 02 	lds	r24, 0x026A
	bluetooth_nchr_status = false;
     c42:	10 92 6a 02 	sts	0x026A, r1
	return a;
}
     c46:	08 95       	ret

00000c48 <__vector_54>:

ISR(USART3_RX_vect) {
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	0f 92       	push	r0
     c50:	0b b6       	in	r0, 0x3b	; 59
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
	if (bluetooth_in_buffer_counter >= BLUETOOTH_IN_BUFFER_LEN) {
     c5e:	80 91 6c 02 	lds	r24, 0x026C
     c62:	80 32       	cpi	r24, 0x20	; 32
     c64:	30 f0       	brcs	.+12     	; 0xc72 <__vector_54+0x2a>
		bluetooth_in_buffer_ovf = true;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 6b 02 	sts	0x026B, r24
		char i = UDR3;
     c6c:	80 91 36 01 	lds	r24, 0x0136
		return;
     c70:	0d c0       	rjmp	.+26     	; 0xc8c <__vector_54+0x44>
	}
	bluetooth_in_buffer[bluetooth_in_buffer_counter] = UDR3;
     c72:	90 91 36 01 	lds	r25, 0x0136
     c76:	ed e6       	ldi	r30, 0x6D	; 109
     c78:	f2 e0       	ldi	r31, 0x02	; 2
     c7a:	e8 0f       	add	r30, r24
     c7c:	f1 1d       	adc	r31, r1
     c7e:	90 83       	st	Z, r25
	bluetooth_nchr_status = true;
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	90 93 6a 02 	sts	0x026A, r25
	bluetooth_in_buffer_counter++;
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 93 6c 02 	sts	0x026C, r24
}
     c8c:	ff 91       	pop	r31
     c8e:	ef 91       	pop	r30
     c90:	9f 91       	pop	r25
     c92:	8f 91       	pop	r24
     c94:	0f 90       	pop	r0
     c96:	0b be       	out	0x3b, r0	; 59
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <_Z14bluetooth_initv>:


void bluetooth_init(void) {
	__bluetooth_rs232_init();
     ca2:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z22__bluetooth_rs232_initv>
	static FILE stdout_dbg = FDEV_SETUP_STREAM(__bluetooth_rs232_putchar, NULL, _FDEV_SETUP_WRITE);
	stdout = &stdout_dbg;
     ca6:	85 e5       	ldi	r24, 0x55	; 85
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	90 93 94 02 	sts	0x0294, r25
     cae:	80 93 93 02 	sts	0x0293, r24
	printf("start ok\r\n");
     cb2:	85 e3       	ldi	r24, 0x35	; 53
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 ab 08 	call	0x1156	; 0x1156 <puts>
}
     cba:	08 95       	ret

00000cbc <_Z9comm_execv>:

void comm_exec(void) {
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
	char* dc = __bluetooth_rs232_get_buffer();
     cc8:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z28__bluetooth_rs232_get_bufferv>
     ccc:	ec 01       	movw	r28, r24
	int str_len = strlen(dc);
     cce:	e8 2f       	mov	r30, r24
     cd0:	f9 2f       	mov	r31, r25
     cd2:	df 01       	movw	r26, r30
     cd4:	0d 90       	ld	r0, X+
     cd6:	00 20       	and	r0, r0
     cd8:	e9 f7       	brne	.-6      	; 0xcd4 <_Z9comm_execv+0x18>
     cda:	11 97       	sbiw	r26, 0x01	; 1
     cdc:	8d 01       	movw	r16, r26
     cde:	0e 1b       	sub	r16, r30
     ce0:	1f 0b       	sbc	r17, r31
	unsigned long zval = 0;
	int i = 0;
	
	if ((str_len > 0) && (__bluetooth_rs232_nc())) __bluetooth_rs232_putchar(dc[str_len-1], NULL);
     ce2:	10 16       	cp	r1, r16
     ce4:	11 06       	cpc	r1, r17
     ce6:	6c f4       	brge	.+26     	; 0xd02 <_Z9comm_execv+0x46>
     ce8:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z20__bluetooth_rs232_ncv>
     cec:	88 23       	and	r24, r24
     cee:	49 f0       	breq	.+18     	; 0xd02 <_Z9comm_execv+0x46>
     cf0:	fe 01       	movw	r30, r28
     cf2:	e0 0f       	add	r30, r16
     cf4:	f1 1f       	adc	r31, r17
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	80 81       	ld	r24, Z
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	0e 94 d1 05 	call	0xba2	; 0xba2 <_Z25__bluetooth_rs232_putcharcP6__file>
	
	if ((dc[str_len-1] == 13) || (dc[str_len-1] == 10)) {
     d02:	0c 0f       	add	r16, r28
     d04:	1d 1f       	adc	r17, r29
     d06:	f8 01       	movw	r30, r16
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	80 81       	ld	r24, Z
     d0c:	8d 30       	cpi	r24, 0x0D	; 13
     d0e:	19 f0       	breq	.+6      	; 0xd16 <_Z9comm_execv+0x5a>
     d10:	8a 30       	cpi	r24, 0x0A	; 10
     d12:	09 f0       	breq	.+2      	; 0xd16 <_Z9comm_execv+0x5a>
     d14:	73 c0       	rjmp	.+230    	; 0xdfc <_Z9comm_execv+0x140>
		zval = strtol(dc + 2, NULL, 10);
     d16:	ce 01       	movw	r24, r28
     d18:	02 96       	adiw	r24, 0x02	; 2
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	4a e0       	ldi	r20, 0x0A	; 10
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <strtol>
     d26:	16 2f       	mov	r17, r22
     d28:	07 2f       	mov	r16, r23
     d2a:	f8 2e       	mov	r15, r24
     d2c:	e9 2e       	mov	r14, r25
		if (strstr(dc, "AA") != NULL) {
     d2e:	ce 01       	movw	r24, r28
     d30:	6f e3       	ldi	r22, 0x3F	; 63
     d32:	72 e0       	ldi	r23, 0x02	; 2
     d34:	0e 94 91 08 	call	0x1122	; 0x1122 <strstr>
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	69 f0       	breq	.+26     	; 0xd56 <_Z9comm_execv+0x9a>
			servo_current = zval;
     d3c:	10 93 8d 02 	sts	0x028D, r17
     d40:	00 93 8e 02 	sts	0x028E, r16
     d44:	f0 92 8f 02 	sts	0x028F, r15
     d48:	e0 92 90 02 	sts	0x0290, r14
			printf("OK\r\n");
     d4c:	82 e4       	ldi	r24, 0x42	; 66
     d4e:	92 e0       	ldi	r25, 0x02	; 2
     d50:	0e 94 ab 08 	call	0x1156	; 0x1156 <puts>
     d54:	51 c0       	rjmp	.+162    	; 0xdf8 <_Z9comm_execv+0x13c>
		} else if (strstr(dc, "AS") != NULL) {
     d56:	ce 01       	movw	r24, r28
     d58:	66 e4       	ldi	r22, 0x46	; 70
     d5a:	72 e0       	ldi	r23, 0x02	; 2
     d5c:	0e 94 91 08 	call	0x1122	; 0x1122 <strstr>
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	99 f0       	breq	.+38     	; 0xd8a <_Z9comm_execv+0xce>
			servo_set(servo_current, zval);
     d64:	60 91 8d 02 	lds	r22, 0x028D
     d68:	70 91 8e 02 	lds	r23, 0x028E
     d6c:	80 91 8f 02 	lds	r24, 0x028F
     d70:	90 91 90 02 	lds	r25, 0x0290
     d74:	21 2f       	mov	r18, r17
     d76:	30 2f       	mov	r19, r16
     d78:	4f 2d       	mov	r20, r15
     d7a:	5e 2d       	mov	r21, r14
     d7c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_Z9servo_setmm>
			printf("OK\r\n");
     d80:	82 e4       	ldi	r24, 0x42	; 66
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	0e 94 ab 08 	call	0x1156	; 0x1156 <puts>
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <_Z9comm_execv+0x13c>
		} 
		
		else if (strstr(dc, "ZZ") != NULL) {
     d8a:	ce 01       	movw	r24, r28
     d8c:	69 e4       	ldi	r22, 0x49	; 73
     d8e:	72 e0       	ldi	r23, 0x02	; 2
     d90:	0e 94 91 08 	call	0x1122	; 0x1122 <strstr>
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	39 f0       	breq	.+14     	; 0xda6 <_Z9comm_execv+0xea>
			rotate_right();
     d98:	0e 94 5b 05 	call	0xab6	; 0xab6 <_Z12rotate_rightv>
			printf("OK\r\n");
     d9c:	82 e4       	ldi	r24, 0x42	; 66
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 ab 08 	call	0x1156	; 0x1156 <puts>
     da4:	29 c0       	rjmp	.+82     	; 0xdf8 <_Z9comm_execv+0x13c>
		} else if (strstr(dc, "XX") != NULL) {
     da6:	ce 01       	movw	r24, r28
     da8:	6c e4       	ldi	r22, 0x4C	; 76
     daa:	72 e0       	ldi	r23, 0x02	; 2
     dac:	0e 94 91 08 	call	0x1122	; 0x1122 <strstr>
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	39 f0       	breq	.+14     	; 0xdc2 <_Z9comm_execv+0x106>
			rotate_left();
     db4:	0e 94 74 05 	call	0xae8	; 0xae8 <_Z11rotate_leftv>
			printf("OK\r\n");
     db8:	82 e4       	ldi	r24, 0x42	; 66
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	0e 94 ab 08 	call	0x1156	; 0x1156 <puts>
     dc0:	1b c0       	rjmp	.+54     	; 0xdf8 <_Z9comm_execv+0x13c>
		} else if (strstr(dc, "CC") != NULL) {
     dc2:	ce 01       	movw	r24, r28
     dc4:	6f e4       	ldi	r22, 0x4F	; 79
     dc6:	72 e0       	ldi	r23, 0x02	; 2
     dc8:	0e 94 91 08 	call	0x1122	; 0x1122 <strstr>
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	39 f0       	breq	.+14     	; 0xdde <_Z9comm_execv+0x122>
			go_next();
     dd0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z7go_nextv>
			printf("OK\r\n");
     dd4:	82 e4       	ldi	r24, 0x42	; 66
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	0e 94 ab 08 	call	0x1156	; 0x1156 <puts>
     ddc:	0d c0       	rjmp	.+26     	; 0xdf8 <_Z9comm_execv+0x13c>
		} else if (strstr(dc, "VV") != NULL) {
     dde:	ce 01       	movw	r24, r28
     de0:	62 e5       	ldi	r22, 0x52	; 82
     de2:	72 e0       	ldi	r23, 0x02	; 2
     de4:	0e 94 91 08 	call	0x1122	; 0x1122 <strstr>
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	31 f0       	breq	.+12     	; 0xdf8 <_Z9comm_execv+0x13c>
			go_back();
     dec:	0e 94 45 05 	call	0xa8a	; 0xa8a <_Z7go_backv>
			printf("OK\r\n");
     df0:	82 e4       	ldi	r24, 0x42	; 66
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	0e 94 ab 08 	call	0x1156	; 0x1156 <puts>
		}
		
		
		__bluetooth_rs232_clear_in_buffer();
     df8:	0e 94 0c 06 	call	0xc18	; 0xc18 <_Z33__bluetooth_rs232_clear_in_bufferv>
	}
	if (__bluetooth_rs232_ibo()) __bluetooth_rs232_clear_in_buffer();
     dfc:	0e 94 1c 06 	call	0xc38	; 0xc38 <_Z21__bluetooth_rs232_ibov>
     e00:	88 23       	and	r24, r24
     e02:	11 f0       	breq	.+4      	; 0xe08 <_Z9comm_execv+0x14c>
     e04:	0e 94 0c 06 	call	0xc18	; 0xc18 <_Z33__bluetooth_rs232_clear_in_bufferv>
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	08 95       	ret

00000e16 <__udivmodhi4>:
     e16:	aa 1b       	sub	r26, r26
     e18:	bb 1b       	sub	r27, r27
     e1a:	51 e1       	ldi	r21, 0x11	; 17
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <__udivmodhi4_ep>

00000e1e <__udivmodhi4_loop>:
     e1e:	aa 1f       	adc	r26, r26
     e20:	bb 1f       	adc	r27, r27
     e22:	a6 17       	cp	r26, r22
     e24:	b7 07       	cpc	r27, r23
     e26:	10 f0       	brcs	.+4      	; 0xe2c <__udivmodhi4_ep>
     e28:	a6 1b       	sub	r26, r22
     e2a:	b7 0b       	sbc	r27, r23

00000e2c <__udivmodhi4_ep>:
     e2c:	88 1f       	adc	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	5a 95       	dec	r21
     e32:	a9 f7       	brne	.-22     	; 0xe1e <__udivmodhi4_loop>
     e34:	80 95       	com	r24
     e36:	90 95       	com	r25
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	08 95       	ret

00000e3e <__divmodsi4>:
     e3e:	97 fb       	bst	r25, 7
     e40:	09 2e       	mov	r0, r25
     e42:	05 26       	eor	r0, r21
     e44:	0e d0       	rcall	.+28     	; 0xe62 <__divmodsi4_neg1>
     e46:	57 fd       	sbrc	r21, 7
     e48:	04 d0       	rcall	.+8      	; 0xe52 <__divmodsi4_neg2>
     e4a:	14 d0       	rcall	.+40     	; 0xe74 <__udivmodsi4>
     e4c:	0a d0       	rcall	.+20     	; 0xe62 <__divmodsi4_neg1>
     e4e:	00 1c       	adc	r0, r0
     e50:	38 f4       	brcc	.+14     	; 0xe60 <__divmodsi4_exit>

00000e52 <__divmodsi4_neg2>:
     e52:	50 95       	com	r21
     e54:	40 95       	com	r20
     e56:	30 95       	com	r19
     e58:	21 95       	neg	r18
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	4f 4f       	sbci	r20, 0xFF	; 255
     e5e:	5f 4f       	sbci	r21, 0xFF	; 255

00000e60 <__divmodsi4_exit>:
     e60:	08 95       	ret

00000e62 <__divmodsi4_neg1>:
     e62:	f6 f7       	brtc	.-4      	; 0xe60 <__divmodsi4_exit>
     e64:	90 95       	com	r25
     e66:	80 95       	com	r24
     e68:	70 95       	com	r23
     e6a:	61 95       	neg	r22
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	08 95       	ret

00000e74 <__udivmodsi4>:
     e74:	a1 e2       	ldi	r26, 0x21	; 33
     e76:	1a 2e       	mov	r1, r26
     e78:	aa 1b       	sub	r26, r26
     e7a:	bb 1b       	sub	r27, r27
     e7c:	fd 01       	movw	r30, r26
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <__udivmodsi4_ep>

00000e80 <__udivmodsi4_loop>:
     e80:	aa 1f       	adc	r26, r26
     e82:	bb 1f       	adc	r27, r27
     e84:	ee 1f       	adc	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	a2 17       	cp	r26, r18
     e8a:	b3 07       	cpc	r27, r19
     e8c:	e4 07       	cpc	r30, r20
     e8e:	f5 07       	cpc	r31, r21
     e90:	20 f0       	brcs	.+8      	; 0xe9a <__udivmodsi4_ep>
     e92:	a2 1b       	sub	r26, r18
     e94:	b3 0b       	sbc	r27, r19
     e96:	e4 0b       	sbc	r30, r20
     e98:	f5 0b       	sbc	r31, r21

00000e9a <__udivmodsi4_ep>:
     e9a:	66 1f       	adc	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	1a 94       	dec	r1
     ea4:	69 f7       	brne	.-38     	; 0xe80 <__udivmodsi4_loop>
     ea6:	60 95       	com	r22
     ea8:	70 95       	com	r23
     eaa:	80 95       	com	r24
     eac:	90 95       	com	r25
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	bd 01       	movw	r22, r26
     eb4:	cf 01       	movw	r24, r30
     eb6:	08 95       	ret

00000eb8 <strtol>:
     eb8:	2f 92       	push	r2
     eba:	3f 92       	push	r3
     ebc:	4f 92       	push	r4
     ebe:	5f 92       	push	r5
     ec0:	7f 92       	push	r7
     ec2:	8f 92       	push	r8
     ec4:	9f 92       	push	r9
     ec6:	af 92       	push	r10
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	4b 01       	movw	r8, r22
     edc:	ea 01       	movw	r28, r20
     ede:	61 15       	cp	r22, r1
     ee0:	71 05       	cpc	r23, r1
     ee2:	19 f0       	breq	.+6      	; 0xeea <strtol+0x32>
     ee4:	fb 01       	movw	r30, r22
     ee6:	80 83       	st	Z, r24
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	20 97       	sbiw	r28, 0x00	; 0
     eec:	39 f0       	breq	.+14     	; 0xefc <strtol+0x44>
     eee:	9e 01       	movw	r18, r28
     ef0:	22 50       	subi	r18, 0x02	; 2
     ef2:	30 40       	sbci	r19, 0x00	; 0
     ef4:	23 32       	cpi	r18, 0x23	; 35
     ef6:	31 05       	cpc	r19, r1
     ef8:	08 f0       	brcs	.+2      	; 0xefc <strtol+0x44>
     efa:	f4 c0       	rjmp	.+488    	; 0x10e4 <strtol+0x22c>
     efc:	a8 2e       	mov	r10, r24
     efe:	b9 2e       	mov	r11, r25
     f00:	f5 01       	movw	r30, r10
     f02:	11 91       	ld	r17, Z+
     f04:	5f 01       	movw	r10, r30
     f06:	7f 01       	movw	r14, r30
     f08:	81 2f       	mov	r24, r17
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 89 08 	call	0x1112	; 0x1112 <isspace>
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	b1 f7       	brne	.-20     	; 0xf00 <strtol+0x48>
     f14:	1d 32       	cpi	r17, 0x2D	; 45
     f16:	29 f4       	brne	.+10     	; 0xf22 <strtol+0x6a>
     f18:	f5 01       	movw	r30, r10
     f1a:	11 91       	ld	r17, Z+
     f1c:	7f 01       	movw	r14, r30
     f1e:	01 e0       	ldi	r16, 0x01	; 1
     f20:	06 c0       	rjmp	.+12     	; 0xf2e <strtol+0x76>
     f22:	1b 32       	cpi	r17, 0x2B	; 43
     f24:	19 f4       	brne	.+6      	; 0xf2c <strtol+0x74>
     f26:	f5 01       	movw	r30, r10
     f28:	11 91       	ld	r17, Z+
     f2a:	7f 01       	movw	r14, r30
     f2c:	00 e0       	ldi	r16, 0x00	; 0
     f2e:	20 97       	sbiw	r28, 0x00	; 0
     f30:	19 f0       	breq	.+6      	; 0xf38 <strtol+0x80>
     f32:	c0 31       	cpi	r28, 0x10	; 16
     f34:	d1 05       	cpc	r29, r1
     f36:	b9 f4       	brne	.+46     	; 0xf66 <strtol+0xae>
     f38:	10 33       	cpi	r17, 0x30	; 48
     f3a:	81 f4       	brne	.+32     	; 0xf5c <strtol+0xa4>
     f3c:	f7 01       	movw	r30, r14
     f3e:	80 81       	ld	r24, Z
     f40:	88 37       	cpi	r24, 0x78	; 120
     f42:	11 f0       	breq	.+4      	; 0xf48 <strtol+0x90>
     f44:	88 35       	cpi	r24, 0x58	; 88
     f46:	51 f4       	brne	.+20     	; 0xf5c <strtol+0xa4>
     f48:	f7 01       	movw	r30, r14
     f4a:	11 81       	ldd	r17, Z+1	; 0x01
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	e8 0e       	add	r14, r24
     f52:	f9 1e       	adc	r15, r25
     f54:	02 60       	ori	r16, 0x02	; 2
     f56:	c0 e1       	ldi	r28, 0x10	; 16
     f58:	d0 e0       	ldi	r29, 0x00	; 0
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <strtol+0xae>
     f5c:	20 97       	sbiw	r28, 0x00	; 0
     f5e:	19 f4       	brne	.+6      	; 0xf66 <strtol+0xae>
     f60:	10 33       	cpi	r17, 0x30	; 48
     f62:	c1 f4       	brne	.+48     	; 0xf94 <strtol+0xdc>
     f64:	22 c0       	rjmp	.+68     	; 0xfaa <strtol+0xf2>
     f66:	c8 30       	cpi	r28, 0x08	; 8
     f68:	d1 05       	cpc	r29, r1
     f6a:	f9 f0       	breq	.+62     	; 0xfaa <strtol+0xf2>
     f6c:	c9 30       	cpi	r28, 0x09	; 9
     f6e:	d1 05       	cpc	r29, r1
     f70:	24 f4       	brge	.+8      	; 0xf7a <strtol+0xc2>
     f72:	c2 30       	cpi	r28, 0x02	; 2
     f74:	d1 05       	cpc	r29, r1
     f76:	09 f5       	brne	.+66     	; 0xfba <strtol+0x102>
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <strtol+0xd0>
     f7a:	ca 30       	cpi	r28, 0x0A	; 10
     f7c:	d1 05       	cpc	r29, r1
     f7e:	51 f0       	breq	.+20     	; 0xf94 <strtol+0xdc>
     f80:	c0 31       	cpi	r28, 0x10	; 16
     f82:	d1 05       	cpc	r29, r1
     f84:	d1 f4       	brne	.+52     	; 0xfba <strtol+0x102>
     f86:	27 c0       	rjmp	.+78     	; 0xfd6 <strtol+0x11e>
     f88:	a1 2c       	mov	r10, r1
     f8a:	b1 2c       	mov	r11, r1
     f8c:	c1 2c       	mov	r12, r1
     f8e:	f0 e4       	ldi	r31, 0x40	; 64
     f90:	df 2e       	mov	r13, r31
     f92:	26 c0       	rjmp	.+76     	; 0xfe0 <strtol+0x128>
     f94:	ca e0       	ldi	r28, 0x0A	; 10
     f96:	d0 e0       	ldi	r29, 0x00	; 0
     f98:	ec ec       	ldi	r30, 0xCC	; 204
     f9a:	ae 2e       	mov	r10, r30
     f9c:	ec ec       	ldi	r30, 0xCC	; 204
     f9e:	be 2e       	mov	r11, r30
     fa0:	ec ec       	ldi	r30, 0xCC	; 204
     fa2:	ce 2e       	mov	r12, r30
     fa4:	ec e0       	ldi	r30, 0x0C	; 12
     fa6:	de 2e       	mov	r13, r30
     fa8:	1b c0       	rjmp	.+54     	; 0xfe0 <strtol+0x128>
     faa:	c8 e0       	ldi	r28, 0x08	; 8
     fac:	d0 e0       	ldi	r29, 0x00	; 0
     fae:	a1 2c       	mov	r10, r1
     fb0:	b1 2c       	mov	r11, r1
     fb2:	c1 2c       	mov	r12, r1
     fb4:	70 e1       	ldi	r23, 0x10	; 16
     fb6:	d7 2e       	mov	r13, r23
     fb8:	13 c0       	rjmp	.+38     	; 0xfe0 <strtol+0x128>
     fba:	9e 01       	movw	r18, r28
     fbc:	44 27       	eor	r20, r20
     fbe:	37 fd       	sbrc	r19, 7
     fc0:	40 95       	com	r20
     fc2:	54 2f       	mov	r21, r20
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e8       	ldi	r25, 0x80	; 128
     fcc:	0e 94 3a 07 	call	0xe74	; 0xe74 <__udivmodsi4>
     fd0:	59 01       	movw	r10, r18
     fd2:	6a 01       	movw	r12, r20
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <strtol+0x128>
     fd6:	a1 2c       	mov	r10, r1
     fd8:	b1 2c       	mov	r11, r1
     fda:	c1 2c       	mov	r12, r1
     fdc:	68 e0       	ldi	r22, 0x08	; 8
     fde:	d6 2e       	mov	r13, r22
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	cb 01       	movw	r24, r22
     fe8:	1e 01       	movw	r2, r28
     fea:	44 24       	eor	r4, r4
     fec:	37 fc       	sbrc	r3, 7
     fee:	40 94       	com	r4
     ff0:	54 2c       	mov	r5, r4
     ff2:	50 ed       	ldi	r21, 0xD0	; 208
     ff4:	75 2e       	mov	r7, r21
     ff6:	71 0e       	add	r7, r17
     ff8:	e7 2d       	mov	r30, r7
     ffa:	ea 30       	cpi	r30, 0x0A	; 10
     ffc:	70 f0       	brcs	.+28     	; 0x101a <strtol+0x162>
     ffe:	21 2f       	mov	r18, r17
    1000:	21 54       	subi	r18, 0x41	; 65
    1002:	2a 31       	cpi	r18, 0x1A	; 26
    1004:	18 f4       	brcc	.+6      	; 0x100c <strtol+0x154>
    1006:	39 ec       	ldi	r19, 0xC9	; 201
    1008:	73 2e       	mov	r7, r19
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <strtol+0x160>
    100c:	21 2f       	mov	r18, r17
    100e:	21 56       	subi	r18, 0x61	; 97
    1010:	2a 31       	cpi	r18, 0x1A	; 26
    1012:	30 f5       	brcc	.+76     	; 0x1060 <strtol+0x1a8>
    1014:	29 ea       	ldi	r18, 0xA9	; 169
    1016:	72 2e       	mov	r7, r18
    1018:	71 0e       	add	r7, r17
    101a:	27 2d       	mov	r18, r7
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	2c 17       	cp	r18, r28
    1020:	3d 07       	cpc	r19, r29
    1022:	f4 f4       	brge	.+60     	; 0x1060 <strtol+0x1a8>
    1024:	47 fd       	sbrc	r20, 7
    1026:	18 c0       	rjmp	.+48     	; 0x1058 <strtol+0x1a0>
    1028:	a6 16       	cp	r10, r22
    102a:	b7 06       	cpc	r11, r23
    102c:	c8 06       	cpc	r12, r24
    102e:	d9 06       	cpc	r13, r25
    1030:	80 f0       	brcs	.+32     	; 0x1052 <strtol+0x19a>
    1032:	a2 01       	movw	r20, r4
    1034:	91 01       	movw	r18, r2
    1036:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__mulsi3>
    103a:	67 0d       	add	r22, r7
    103c:	71 1d       	adc	r23, r1
    103e:	81 1d       	adc	r24, r1
    1040:	91 1d       	adc	r25, r1
    1042:	61 30       	cpi	r22, 0x01	; 1
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	7f 07       	cpc	r23, r31
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8f 07       	cpc	r24, r31
    104c:	f0 e8       	ldi	r31, 0x80	; 128
    104e:	9f 07       	cpc	r25, r31
    1050:	10 f0       	brcs	.+4      	; 0x1056 <strtol+0x19e>
    1052:	4f ef       	ldi	r20, 0xFF	; 255
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <strtol+0x1a0>
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	f7 01       	movw	r30, r14
    105a:	11 91       	ld	r17, Z+
    105c:	7f 01       	movw	r14, r30
    105e:	c9 cf       	rjmp	.-110    	; 0xff2 <strtol+0x13a>
    1060:	81 14       	cp	r8, r1
    1062:	91 04       	cpc	r9, r1
    1064:	91 f0       	breq	.+36     	; 0x108a <strtol+0x1d2>
    1066:	44 23       	and	r20, r20
    1068:	39 f0       	breq	.+14     	; 0x1078 <strtol+0x1c0>
    106a:	08 94       	sec
    106c:	e1 08       	sbc	r14, r1
    106e:	f1 08       	sbc	r15, r1
    1070:	f4 01       	movw	r30, r8
    1072:	f1 82       	std	Z+1, r15	; 0x01
    1074:	e0 82       	st	Z, r14
    1076:	09 c0       	rjmp	.+18     	; 0x108a <strtol+0x1d2>
    1078:	01 ff       	sbrs	r16, 1
    107a:	1b c0       	rjmp	.+54     	; 0x10b2 <strtol+0x1fa>
    107c:	97 01       	movw	r18, r14
    107e:	22 50       	subi	r18, 0x02	; 2
    1080:	30 40       	sbci	r19, 0x00	; 0
    1082:	f4 01       	movw	r30, r8
    1084:	31 83       	std	Z+1, r19	; 0x01
    1086:	20 83       	st	Z, r18
    1088:	14 c0       	rjmp	.+40     	; 0x10b2 <strtol+0x1fa>
    108a:	47 ff       	sbrs	r20, 7
    108c:	12 c0       	rjmp	.+36     	; 0x10b2 <strtol+0x1fa>
    108e:	00 ff       	sbrs	r16, 0
    1090:	05 c0       	rjmp	.+10     	; 0x109c <strtol+0x1e4>
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e8       	ldi	r25, 0x80	; 128
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <strtol+0x1ec>
    109c:	6f ef       	ldi	r22, 0xFF	; 255
    109e:	7f ef       	ldi	r23, 0xFF	; 255
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	9f e7       	ldi	r25, 0x7F	; 127
    10a4:	22 e2       	ldi	r18, 0x22	; 34
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	30 93 98 02 	sts	0x0298, r19
    10ac:	20 93 97 02 	sts	0x0297, r18
    10b0:	16 c0       	rjmp	.+44     	; 0x10de <strtol+0x226>
    10b2:	00 ff       	sbrs	r16, 0
    10b4:	08 c0       	rjmp	.+16     	; 0x10c6 <strtol+0x20e>
    10b6:	90 95       	com	r25
    10b8:	80 95       	com	r24
    10ba:	70 95       	com	r23
    10bc:	61 95       	neg	r22
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	8f 4f       	sbci	r24, 0xFF	; 255
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <strtol+0x226>
    10c6:	97 ff       	sbrs	r25, 7
    10c8:	0a c0       	rjmp	.+20     	; 0x10de <strtol+0x226>
    10ca:	82 e2       	ldi	r24, 0x22	; 34
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	90 93 98 02 	sts	0x0298, r25
    10d2:	80 93 97 02 	sts	0x0297, r24
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	7f ef       	ldi	r23, 0xFF	; 255
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	9f e7       	ldi	r25, 0x7F	; 127
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	03 c0       	rjmp	.+6      	; 0x10ea <strtol+0x232>
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	a9 01       	movw	r20, r18
    10ea:	b9 01       	movw	r22, r18
    10ec:	ca 01       	movw	r24, r20
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
    1102:	9f 90       	pop	r9
    1104:	8f 90       	pop	r8
    1106:	7f 90       	pop	r7
    1108:	5f 90       	pop	r5
    110a:	4f 90       	pop	r4
    110c:	3f 90       	pop	r3
    110e:	2f 90       	pop	r2
    1110:	08 95       	ret

00001112 <isspace>:
    1112:	91 11       	cpse	r25, r1
    1114:	57 c0       	rjmp	.+174    	; 0x11c4 <__ctype_isfalse>
    1116:	80 32       	cpi	r24, 0x20	; 32
    1118:	19 f0       	breq	.+6      	; 0x1120 <isspace+0xe>
    111a:	89 50       	subi	r24, 0x09	; 9
    111c:	85 50       	subi	r24, 0x05	; 5
    111e:	d0 f7       	brcc	.-12     	; 0x1114 <isspace+0x2>
    1120:	08 95       	ret

00001122 <strstr>:
    1122:	fb 01       	movw	r30, r22
    1124:	51 91       	ld	r21, Z+
    1126:	55 23       	and	r21, r21
    1128:	a9 f0       	breq	.+42     	; 0x1154 <strstr+0x32>
    112a:	bf 01       	movw	r22, r30
    112c:	dc 01       	movw	r26, r24
    112e:	4d 91       	ld	r20, X+
    1130:	45 17       	cp	r20, r21
    1132:	41 11       	cpse	r20, r1
    1134:	e1 f7       	brne	.-8      	; 0x112e <strstr+0xc>
    1136:	59 f4       	brne	.+22     	; 0x114e <strstr+0x2c>
    1138:	cd 01       	movw	r24, r26
    113a:	01 90       	ld	r0, Z+
    113c:	00 20       	and	r0, r0
    113e:	49 f0       	breq	.+18     	; 0x1152 <strstr+0x30>
    1140:	4d 91       	ld	r20, X+
    1142:	40 15       	cp	r20, r0
    1144:	41 11       	cpse	r20, r1
    1146:	c9 f3       	breq	.-14     	; 0x113a <strstr+0x18>
    1148:	fb 01       	movw	r30, r22
    114a:	41 11       	cpse	r20, r1
    114c:	ef cf       	rjmp	.-34     	; 0x112c <strstr+0xa>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	08 95       	ret

00001156 <puts>:
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	8c 01       	movw	r16, r24
    1164:	e0 91 93 02 	lds	r30, 0x0293
    1168:	f0 91 94 02 	lds	r31, 0x0294
    116c:	83 81       	ldd	r24, Z+3	; 0x03
    116e:	81 ff       	sbrs	r24, 1
    1170:	1f c0       	rjmp	.+62     	; 0x11b0 <puts+0x5a>
    1172:	c0 e0       	ldi	r28, 0x00	; 0
    1174:	d0 e0       	ldi	r29, 0x00	; 0
    1176:	0a c0       	rjmp	.+20     	; 0x118c <puts+0x36>
    1178:	db 01       	movw	r26, r22
    117a:	18 96       	adiw	r26, 0x08	; 8
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	19 97       	sbiw	r26, 0x09	; 9
    1182:	19 95       	eicall
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	11 f0       	breq	.+4      	; 0x118c <puts+0x36>
    1188:	cf ef       	ldi	r28, 0xFF	; 255
    118a:	df ef       	ldi	r29, 0xFF	; 255
    118c:	f8 01       	movw	r30, r16
    118e:	81 91       	ld	r24, Z+
    1190:	8f 01       	movw	r16, r30
    1192:	60 91 93 02 	lds	r22, 0x0293
    1196:	70 91 94 02 	lds	r23, 0x0294
    119a:	88 23       	and	r24, r24
    119c:	69 f7       	brne	.-38     	; 0x1178 <puts+0x22>
    119e:	db 01       	movw	r26, r22
    11a0:	18 96       	adiw	r26, 0x08	; 8
    11a2:	ed 91       	ld	r30, X+
    11a4:	fc 91       	ld	r31, X
    11a6:	19 97       	sbiw	r26, 0x09	; 9
    11a8:	8a e0       	ldi	r24, 0x0A	; 10
    11aa:	19 95       	eicall
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <puts+0x5e>
    11b0:	cf ef       	ldi	r28, 0xFF	; 255
    11b2:	df ef       	ldi	r29, 0xFF	; 255
    11b4:	ce 01       	movw	r24, r28
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	08 95       	ret

000011c4 <__ctype_isfalse>:
    11c4:	99 27       	eor	r25, r25
    11c6:	88 27       	eor	r24, r24

000011c8 <__ctype_istrue>:
    11c8:	08 95       	ret

000011ca <__mulsi3>:
    11ca:	62 9f       	mul	r22, r18
    11cc:	d0 01       	movw	r26, r0
    11ce:	73 9f       	mul	r23, r19
    11d0:	f0 01       	movw	r30, r0
    11d2:	82 9f       	mul	r24, r18
    11d4:	e0 0d       	add	r30, r0
    11d6:	f1 1d       	adc	r31, r1
    11d8:	64 9f       	mul	r22, r20
    11da:	e0 0d       	add	r30, r0
    11dc:	f1 1d       	adc	r31, r1
    11de:	92 9f       	mul	r25, r18
    11e0:	f0 0d       	add	r31, r0
    11e2:	83 9f       	mul	r24, r19
    11e4:	f0 0d       	add	r31, r0
    11e6:	74 9f       	mul	r23, r20
    11e8:	f0 0d       	add	r31, r0
    11ea:	65 9f       	mul	r22, r21
    11ec:	f0 0d       	add	r31, r0
    11ee:	99 27       	eor	r25, r25
    11f0:	72 9f       	mul	r23, r18
    11f2:	b0 0d       	add	r27, r0
    11f4:	e1 1d       	adc	r30, r1
    11f6:	f9 1f       	adc	r31, r25
    11f8:	63 9f       	mul	r22, r19
    11fa:	b0 0d       	add	r27, r0
    11fc:	e1 1d       	adc	r30, r1
    11fe:	f9 1f       	adc	r31, r25
    1200:	bd 01       	movw	r22, r26
    1202:	cf 01       	movw	r24, r30
    1204:	11 24       	eor	r1, r1
    1206:	08 95       	ret

00001208 <_exit>:
    1208:	f8 94       	cli

0000120a <__stop_program>:
    120a:	ff cf       	rjmp	.-2      	; 0x120a <__stop_program>
